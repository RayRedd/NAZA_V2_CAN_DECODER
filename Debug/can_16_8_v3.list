
can_16_8_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000215c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080022e4  080022e4  000122e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000018  20000000  08002350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009b8  20000018  08002368  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200009d0  08002368  000209d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e2cf  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f58  00000000  00000000  0002e317  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000044bd  00000000  00000000  0003026f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000838  00000000  00000000  00034730  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000930  00000000  00000000  00034f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000043f4  00000000  00000000  00035898  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003f8f  00000000  00000000  00039c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003dc1b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001564  00000000  00000000  0003dc98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022cc 	.word	0x080022cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080022cc 	.word	0x080022cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_InitTick+0x40>)
{
 80004dc:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	b908      	cbnz	r0, 80004e6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80004e2:	2001      	movs	r0, #1
 80004e4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80004e6:	4a0d      	ldr	r2, [pc, #52]	; (800051c <HAL_InitTick+0x44>)
 80004e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f0:	6810      	ldr	r0, [r2, #0]
 80004f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f6:	f000 fb95 	bl	8000c24 <HAL_SYSTICK_Config>
 80004fa:	4604      	mov	r4, r0
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d1f0      	bne.n	80004e2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000500:	2d0f      	cmp	r5, #15
 8000502:	d8ee      	bhi.n	80004e2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000504:	4602      	mov	r2, r0
 8000506:	4629      	mov	r1, r5
 8000508:	f04f 30ff 	mov.w	r0, #4294967295
 800050c:	f000 fb48 	bl	8000ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <HAL_InitTick+0x48>)
 8000512:	4620      	mov	r0, r4
 8000514:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000516:	bd38      	pop	{r3, r4, r5, pc}
 8000518:	20000000 	.word	0x20000000
 800051c:	20000014 	.word	0x20000014
 8000520:	20000004 	.word	0x20000004

08000524 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_Init+0x28>)
 8000526:	6813      	ldr	r3, [r2, #0]
 8000528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800052c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000532:	f000 fb23 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff ffce 	bl	80004d8 <HAL_InitTick>
 800053c:	4604      	mov	r4, r0
 800053e:	b918      	cbnz	r0, 8000548 <HAL_Init+0x24>
    HAL_MspInit();
 8000540:	f001 fda6 	bl	8002090 <HAL_MspInit>
}
 8000544:	4620      	mov	r0, r4
 8000546:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000548:	2401      	movs	r4, #1
 800054a:	e7fb      	b.n	8000544 <HAL_Init+0x20>
 800054c:	40022000 	.word	0x40022000

08000550 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <HAL_IncTick+0x10>)
 8000552:	4904      	ldr	r1, [pc, #16]	; (8000564 <HAL_IncTick+0x14>)
 8000554:	6813      	ldr	r3, [r2, #0]
 8000556:	6809      	ldr	r1, [r1, #0]
 8000558:	440b      	add	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000034 	.word	0x20000034
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <HAL_GetTick+0x8>)
 800056a:	6818      	ldr	r0, [r3, #0]
}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000034 	.word	0x20000034

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b538      	push	{r3, r4, r5, lr}
 8000576:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000578:	f7ff fff6 	bl	8000568 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	bf1c      	itt	ne
 8000580:	4b05      	ldrne	r3, [pc, #20]	; (8000598 <HAL_Delay+0x24>)
 8000582:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000584:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000586:	bf18      	it	ne
 8000588:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058a:	f7ff ffed 	bl	8000568 <HAL_GetTick>
 800058e:	1b40      	subs	r0, r0, r5
 8000590:	4284      	cmp	r4, r0
 8000592:	d8fa      	bhi.n	800058a <HAL_Delay+0x16>
  {
  }
}
 8000594:	bd38      	pop	{r3, r4, r5, pc}
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000

0800059c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800059e:	4604      	mov	r4, r0
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d06e      	beq.n	8000682 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80005a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80005a8:	b90b      	cbnz	r3, 80005ae <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80005aa:	f001 fd89 	bl	80020c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80005ae:	6822      	ldr	r2, [r4, #0]
 80005b0:	6813      	ldr	r3, [r2, #0]
 80005b2:	f023 0302 	bic.w	r3, r3, #2
 80005b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005b8:	f7ff ffd6 	bl	8000568 <HAL_GetTick>
 80005bc:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80005be:	6823      	ldr	r3, [r4, #0]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	0791      	lsls	r1, r2, #30
 80005c4:	d451      	bmi.n	800066a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	f042 0201 	orr.w	r2, r2, #1
 80005cc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005ce:	f7ff ffcb 	bl	8000568 <HAL_GetTick>
 80005d2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	07d2      	lsls	r2, r2, #31
 80005da:	d554      	bpl.n	8000686 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80005dc:	7e22      	ldrb	r2, [r4, #24]
 80005de:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	bf0c      	ite	eq
 80005e4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80005e8:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80005ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80005ee:	7e62      	ldrb	r2, [r4, #25]
 80005f0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	bf0c      	ite	eq
 80005f6:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80005fa:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80005fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000600:	7ea2      	ldrb	r2, [r4, #26]
 8000602:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	bf0c      	ite	eq
 8000608:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800060c:	f022 0220 	bicne.w	r2, r2, #32
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000612:	7ee2      	ldrb	r2, [r4, #27]
 8000614:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	bf0c      	ite	eq
 800061a:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800061e:	f042 0210 	orrne.w	r2, r2, #16
 8000622:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000624:	7f22      	ldrb	r2, [r4, #28]
 8000626:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	bf0c      	ite	eq
 800062c:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000630:	f022 0208 	bicne.w	r2, r2, #8
 8000634:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000636:	7f62      	ldrb	r2, [r4, #29]
 8000638:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	bf0c      	ite	eq
 800063e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000642:	f022 0204 	bicne.w	r2, r2, #4
 8000646:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000648:	68e1      	ldr	r1, [r4, #12]
 800064a:	68a2      	ldr	r2, [r4, #8]
 800064c:	430a      	orrs	r2, r1
 800064e:	6921      	ldr	r1, [r4, #16]
 8000650:	430a      	orrs	r2, r1
 8000652:	6961      	ldr	r1, [r4, #20]
 8000654:	430a      	orrs	r2, r1
 8000656:	6861      	ldr	r1, [r4, #4]
 8000658:	3901      	subs	r1, #1
 800065a:	430a      	orrs	r2, r1
 800065c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800065e:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000660:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000662:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000664:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000668:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800066a:	f7ff ff7d 	bl	8000568 <HAL_GetTick>
 800066e:	1b40      	subs	r0, r0, r5
 8000670:	280a      	cmp	r0, #10
 8000672:	d9a4      	bls.n	80005be <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800067c:	2305      	movs	r3, #5
 800067e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000682:	2001      	movs	r0, #1
}
 8000684:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000686:	f7ff ff6f 	bl	8000568 <HAL_GetTick>
 800068a:	1b40      	subs	r0, r0, r5
 800068c:	280a      	cmp	r0, #10
 800068e:	d9a1      	bls.n	80005d4 <HAL_CAN_Init+0x38>
 8000690:	e7f0      	b.n	8000674 <HAL_CAN_Init+0xd8>

08000692 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000692:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000696:	3b01      	subs	r3, #1
 8000698:	2b01      	cmp	r3, #1
{
 800069a:	b570      	push	{r4, r5, r6, lr}
  if ((state == HAL_CAN_STATE_READY) ||
 800069c:	d85f      	bhi.n	800075e <HAL_CAN_ConfigFilter+0xcc>
  CAN_TypeDef *can_ip = hcan->Instance;
 800069e:	6803      	ldr	r3, [r0, #0]
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80006a0:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80006a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80006a6:	f042 0201 	orr.w	r2, r2, #1
 80006aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80006ae:	2401      	movs	r4, #1
 80006b0:	f000 021f 	and.w	r2, r0, #31

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80006b4:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80006b8:	fa04 f202 	lsl.w	r2, r4, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80006bc:	43d4      	mvns	r4, r2
 80006be:	4025      	ands	r5, r4
 80006c0:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80006c4:	69cd      	ldr	r5, [r1, #28]
 80006c6:	bb85      	cbnz	r5, 800072a <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80006c8:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80006cc:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80006ce:	4025      	ands	r5, r4
 80006d0:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80006d4:	888d      	ldrh	r5, [r1, #4]
 80006d6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80006da:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80006de:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80006e2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80006e4:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80006e6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80006ea:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80006ee:	6988      	ldr	r0, [r1, #24]
 80006f0:	bb68      	cbnz	r0, 800074e <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80006f2:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80006f6:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80006f8:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80006fc:	6908      	ldr	r0, [r1, #16]
 80006fe:	bb50      	cbnz	r0, 8000756 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000700:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000704:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000706:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800070a:	6a09      	ldr	r1, [r1, #32]
 800070c:	2901      	cmp	r1, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800070e:	bf02      	ittt	eq
 8000710:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8000714:	430a      	orreq	r2, r1
 8000716:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800071a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800071e:	f022 0201 	bic.w	r2, r2, #1
 8000722:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000726:	2000      	movs	r0, #0
 8000728:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800072a:	2d01      	cmp	r5, #1
 800072c:	d1df      	bne.n	80006ee <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800072e:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000732:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000734:	4315      	orrs	r5, r2
 8000736:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800073a:	888d      	ldrh	r5, [r1, #4]
 800073c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000740:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000744:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000748:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800074a:	898d      	ldrh	r5, [r1, #12]
 800074c:	e7cb      	b.n	80006e6 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800074e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000752:	4310      	orrs	r0, r2
 8000754:	e7d0      	b.n	80006f8 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000756:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800075a:	4310      	orrs	r0, r2
 800075c:	e7d3      	b.n	8000706 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800075e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000764:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000766:	2001      	movs	r0, #1
  }
}
 8000768:	bd70      	pop	{r4, r5, r6, pc}

0800076a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800076a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800076c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000770:	2b01      	cmp	r3, #1
{
 8000772:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000774:	d11f      	bne.n	80007b6 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000776:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000778:	2302      	movs	r3, #2
 800077a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800077e:	6813      	ldr	r3, [r2, #0]
 8000780:	f023 0301 	bic.w	r3, r3, #1
 8000784:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000786:	f7ff feef 	bl	8000568 <HAL_GetTick>
 800078a:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	6858      	ldr	r0, [r3, #4]
 8000790:	f010 0001 	ands.w	r0, r0, #1
 8000794:	d101      	bne.n	800079a <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000796:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000798:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800079a:	f7ff fee5 	bl	8000568 <HAL_GetTick>
 800079e:	1b40      	subs	r0, r0, r5
 80007a0:	280a      	cmp	r0, #10
 80007a2:	d9f3      	bls.n	800078c <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007aa:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80007ac:	2305      	movs	r3, #5
 80007ae:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 80007b2:	2001      	movs	r0, #1
  }
}
 80007b4:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80007b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007bc:	6243      	str	r3, [r0, #36]	; 0x24
 80007be:	e7f8      	b.n	80007b2 <HAL_CAN_Start+0x48>

080007c0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80007c2:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80007c6:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80007c8:	3d01      	subs	r5, #1
 80007ca:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80007cc:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80007ce:	d840      	bhi.n	8000852 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80007d0:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80007d4:	d039      	beq.n	800084a <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80007d6:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80007da:	2c03      	cmp	r4, #3
 80007dc:	f04f 0501 	mov.w	r5, #1
 80007e0:	d105      	bne.n	80007ee <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80007e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007e8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80007ea:	2001      	movs	r0, #1
  }
}
 80007ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80007ee:	40a5      	lsls	r5, r4
 80007f0:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80007f2:	6888      	ldr	r0, [r1, #8]
 80007f4:	68cf      	ldr	r7, [r1, #12]
 80007f6:	f104 0318 	add.w	r3, r4, #24
 80007fa:	bb08      	cbnz	r0, 8000840 <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80007fc:	6808      	ldr	r0, [r1, #0]
 80007fe:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	0124      	lsls	r4, r4, #4
 8000806:	50f0      	str	r0, [r6, r3]
 8000808:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800080a:	6908      	ldr	r0, [r1, #16]
      if (pHeader->TransmitGlobalTime == ENABLE)
 800080c:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800080e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000812:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000814:	bf02      	ittt	eq
 8000816:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 800081a:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800081e:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000822:	4434      	add	r4, r6
 8000824:	6851      	ldr	r1, [r2, #4]
 8000826:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800082a:	6812      	ldr	r2, [r2, #0]
 800082c:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000830:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000834:	f042 0201 	orr.w	r2, r2, #1
 8000838:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 800083c:	2000      	movs	r0, #0
 800083e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000840:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000842:	4338      	orrs	r0, r7
 8000844:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000848:	e7db      	b.n	8000802 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800084a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000850:	e7ca      	b.n	80007e8 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000852:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000858:	e7c6      	b.n	80007e8 <HAL_CAN_AddTxMessage+0x28>

0800085a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800085a:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800085c:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000860:	3c01      	subs	r4, #1
 8000862:	2c01      	cmp	r4, #1
 8000864:	d86b      	bhi.n	800093e <HAL_CAN_GetRxMessage+0xe4>
 8000866:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000868:	b941      	cbnz	r1, 800087c <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800086a:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800086c:	07a4      	lsls	r4, r4, #30
 800086e:	d107      	bne.n	8000880 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000870:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000876:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000878:	2001      	movs	r0, #1
  }
}
 800087a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800087c:	6934      	ldr	r4, [r6, #16]
 800087e:	e7f5      	b.n	800086c <HAL_CAN_GetRxMessage+0x12>
 8000880:	010c      	lsls	r4, r1, #4
 8000882:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000884:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000888:	f007 0704 	and.w	r7, r7, #4
 800088c:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800088e:	2f00      	cmp	r7, #0
 8000890:	d14b      	bne.n	800092a <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000892:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000896:	0d7f      	lsrs	r7, r7, #21
 8000898:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800089a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800089e:	f3c7 0740 	ubfx	r7, r7, #1, #1
 80008a2:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80008a4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80008a8:	f007 070f 	and.w	r7, r7, #15
 80008ac:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008ae:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008b2:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008b6:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008b8:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008bc:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80008be:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80008c0:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80008c2:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80008c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80008c8:	6802      	ldr	r2, [r0, #0]
 80008ca:	4422      	add	r2, r4
 80008cc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008d0:	0a12      	lsrs	r2, r2, #8
 80008d2:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80008d4:	6802      	ldr	r2, [r0, #0]
 80008d6:	4422      	add	r2, r4
 80008d8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008dc:	0c12      	lsrs	r2, r2, #16
 80008de:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80008e0:	6802      	ldr	r2, [r0, #0]
 80008e2:	4422      	add	r2, r4
 80008e4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008e8:	0e12      	lsrs	r2, r2, #24
 80008ea:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80008ec:	6802      	ldr	r2, [r0, #0]
 80008ee:	4422      	add	r2, r4
 80008f0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80008f4:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80008f6:	6802      	ldr	r2, [r0, #0]
 80008f8:	4422      	add	r2, r4
 80008fa:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80008fe:	0a12      	lsrs	r2, r2, #8
 8000900:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000902:	6802      	ldr	r2, [r0, #0]
 8000904:	4422      	add	r2, r4
 8000906:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800090a:	0c12      	lsrs	r2, r2, #16
 800090c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800090e:	6802      	ldr	r2, [r0, #0]
 8000910:	4414      	add	r4, r2
 8000912:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000916:	0e12      	lsrs	r2, r2, #24
 8000918:	71da      	strb	r2, [r3, #7]
 800091a:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800091c:	b951      	cbnz	r1, 8000934 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	f042 0220 	orr.w	r2, r2, #32
 8000924:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000926:	2000      	movs	r0, #0
 8000928:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800092a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800092e:	08ff      	lsrs	r7, r7, #3
 8000930:	6057      	str	r7, [r2, #4]
 8000932:	e7b2      	b.n	800089a <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000934:	691a      	ldr	r2, [r3, #16]
 8000936:	f042 0220 	orr.w	r2, r2, #32
 800093a:	611a      	str	r2, [r3, #16]
 800093c:	e7f3      	b.n	8000926 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800093e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000944:	e797      	b.n	8000876 <HAL_CAN_GetRxMessage+0x1c>

08000946 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000946:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800094a:	3b01      	subs	r3, #1
 800094c:	2b01      	cmp	r3, #1
 800094e:	d805      	bhi.n	800095c <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000950:	6802      	ldr	r2, [r0, #0]
 8000952:	6953      	ldr	r3, [r2, #20]
 8000954:	4319      	orrs	r1, r3
 8000956:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8000958:	2000      	movs	r0, #0
 800095a:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800095c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800095e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000962:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000964:	2001      	movs	r0, #1
  }
}
 8000966:	4770      	bx	lr

08000968 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000968:	4770      	bx	lr

0800096a <HAL_CAN_TxMailbox1CompleteCallback>:
 800096a:	4770      	bx	lr

0800096c <HAL_CAN_TxMailbox2CompleteCallback>:
 800096c:	4770      	bx	lr

0800096e <HAL_CAN_TxMailbox0AbortCallback>:
 800096e:	4770      	bx	lr

08000970 <HAL_CAN_TxMailbox1AbortCallback>:
 8000970:	4770      	bx	lr

08000972 <HAL_CAN_TxMailbox2AbortCallback>:
 8000972:	4770      	bx	lr

08000974 <HAL_CAN_RxFifo0FullCallback>:
 8000974:	4770      	bx	lr

08000976 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000976:	4770      	bx	lr

08000978 <HAL_CAN_RxFifo1FullCallback>:
 8000978:	4770      	bx	lr

0800097a <HAL_CAN_SleepCallback>:
 800097a:	4770      	bx	lr

0800097c <HAL_CAN_WakeUpFromRxMsgCallback>:
 800097c:	4770      	bx	lr

0800097e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800097e:	4770      	bx	lr

08000980 <HAL_CAN_IRQHandler>:
{
 8000980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000984:	6803      	ldr	r3, [r0, #0]
 8000986:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000988:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800098c:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800098e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000992:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000996:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800099a:	f016 0401 	ands.w	r4, r6, #1
{
 800099e:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80009a0:	d022      	beq.n	80009e8 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80009a2:	f017 0401 	ands.w	r4, r7, #1
 80009a6:	d007      	beq.n	80009b8 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80009a8:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80009aa:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80009ac:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80009ae:	f140 80a3 	bpl.w	8000af8 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80009b2:	f7ff ffd9 	bl	8000968 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80009b6:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80009b8:	05fb      	lsls	r3, r7, #23
 80009ba:	d509      	bpl.n	80009d0 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009c2:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009c4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009c6:	f140 80a5 	bpl.w	8000b14 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80009ca:	4628      	mov	r0, r5
 80009cc:	f7ff ffcd 	bl	800096a <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80009d0:	03fb      	lsls	r3, r7, #15
 80009d2:	d509      	bpl.n	80009e8 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009da:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009dc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009de:	f140 80a7 	bpl.w	8000b30 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80009e2:	4628      	mov	r0, r5
 80009e4:	f7ff ffc2 	bl	800096c <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80009e8:	0733      	lsls	r3, r6, #28
 80009ea:	d507      	bpl.n	80009fc <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80009ec:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80009f0:	bf1f      	itttt	ne
 80009f2:	682b      	ldrne	r3, [r5, #0]
 80009f4:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80009f6:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80009fa:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80009fc:	0777      	lsls	r7, r6, #29
 80009fe:	d508      	bpl.n	8000a12 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a00:	f01b 0f08 	tst.w	fp, #8
 8000a04:	d005      	beq.n	8000a12 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a06:	682b      	ldr	r3, [r5, #0]
 8000a08:	2208      	movs	r2, #8
 8000a0a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	f7ff ffb1 	bl	8000974 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a12:	07b0      	lsls	r0, r6, #30
 8000a14:	d506      	bpl.n	8000a24 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	0799      	lsls	r1, r3, #30
 8000a1c:	d002      	beq.n	8000a24 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000a1e:	4628      	mov	r0, r5
 8000a20:	f001 fa0c 	bl	8001e3c <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a24:	0672      	lsls	r2, r6, #25
 8000a26:	d507      	bpl.n	8000a38 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a28:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a2c:	bf1f      	itttt	ne
 8000a2e:	682b      	ldrne	r3, [r5, #0]
 8000a30:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a32:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a36:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a38:	06b3      	lsls	r3, r6, #26
 8000a3a:	d508      	bpl.n	8000a4e <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a3c:	f01a 0f08 	tst.w	sl, #8
 8000a40:	d005      	beq.n	8000a4e <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a42:	682b      	ldr	r3, [r5, #0]
 8000a44:	2208      	movs	r2, #8
 8000a46:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a48:	4628      	mov	r0, r5
 8000a4a:	f7ff ff95 	bl	8000978 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a4e:	06f7      	lsls	r7, r6, #27
 8000a50:	d506      	bpl.n	8000a60 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a52:	682b      	ldr	r3, [r5, #0]
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	0798      	lsls	r0, r3, #30
 8000a58:	d002      	beq.n	8000a60 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	f7ff ff8b 	bl	8000976 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a60:	03b1      	lsls	r1, r6, #14
 8000a62:	d508      	bpl.n	8000a76 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a64:	f019 0f10 	tst.w	r9, #16
 8000a68:	d005      	beq.n	8000a76 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000a70:	4628      	mov	r0, r5
 8000a72:	f7ff ff82 	bl	800097a <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a76:	03f2      	lsls	r2, r6, #15
 8000a78:	d508      	bpl.n	8000a8c <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a7a:	f019 0f08 	tst.w	r9, #8
 8000a7e:	d005      	beq.n	8000a8c <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	2208      	movs	r2, #8
 8000a84:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a86:	4628      	mov	r0, r5
 8000a88:	f7ff ff78 	bl	800097c <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a8c:	0433      	lsls	r3, r6, #16
 8000a8e:	d52a      	bpl.n	8000ae6 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a90:	f019 0f04 	tst.w	r9, #4
 8000a94:	682a      	ldr	r2, [r5, #0]
 8000a96:	d024      	beq.n	8000ae2 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a98:	05f7      	lsls	r7, r6, #23
 8000a9a:	d504      	bpl.n	8000aa6 <HAL_CAN_IRQHandler+0x126>
 8000a9c:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000aa0:	bf18      	it	ne
 8000aa2:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000aa6:	05b0      	lsls	r0, r6, #22
 8000aa8:	d504      	bpl.n	8000ab4 <HAL_CAN_IRQHandler+0x134>
 8000aaa:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000aae:	bf18      	it	ne
 8000ab0:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000ab4:	0571      	lsls	r1, r6, #21
 8000ab6:	d504      	bpl.n	8000ac2 <HAL_CAN_IRQHandler+0x142>
 8000ab8:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000abc:	bf18      	it	ne
 8000abe:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ac2:	0533      	lsls	r3, r6, #20
 8000ac4:	d50d      	bpl.n	8000ae2 <HAL_CAN_IRQHandler+0x162>
 8000ac6:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000aca:	d00a      	beq.n	8000ae2 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8000acc:	2b30      	cmp	r3, #48	; 0x30
 8000ace:	d04c      	beq.n	8000b6a <HAL_CAN_IRQHandler+0x1ea>
 8000ad0:	d83c      	bhi.n	8000b4c <HAL_CAN_IRQHandler+0x1cc>
 8000ad2:	2b10      	cmp	r3, #16
 8000ad4:	d043      	beq.n	8000b5e <HAL_CAN_IRQHandler+0x1de>
 8000ad6:	2b20      	cmp	r3, #32
 8000ad8:	d044      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000ada:	6993      	ldr	r3, [r2, #24]
 8000adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ae0:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000ae6:	b12c      	cbz	r4, 8000af4 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8000ae8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000aea:	431c      	orrs	r4, r3
 8000aec:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000aee:	4628      	mov	r0, r5
 8000af0:	f7ff ff45 	bl	800097e <HAL_CAN_ErrorCallback>
 8000af4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000af8:	077a      	lsls	r2, r7, #29
 8000afa:	d405      	bmi.n	8000b08 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000afc:	f017 0408 	ands.w	r4, r7, #8
 8000b00:	d105      	bne.n	8000b0e <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b02:	f7ff ff34 	bl	800096e <HAL_CAN_TxMailbox0AbortCallback>
 8000b06:	e757      	b.n	80009b8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b08:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000b0c:	e754      	b.n	80009b8 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b0e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000b12:	e751      	b.n	80009b8 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b14:	0579      	lsls	r1, r7, #21
 8000b16:	d502      	bpl.n	8000b1e <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b18:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000b1c:	e758      	b.n	80009d0 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b1e:	053a      	lsls	r2, r7, #20
 8000b20:	d502      	bpl.n	8000b28 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b22:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b26:	e753      	b.n	80009d0 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b28:	4628      	mov	r0, r5
 8000b2a:	f7ff ff21 	bl	8000970 <HAL_CAN_TxMailbox1AbortCallback>
 8000b2e:	e74f      	b.n	80009d0 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b30:	0379      	lsls	r1, r7, #13
 8000b32:	d502      	bpl.n	8000b3a <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b34:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000b38:	e756      	b.n	80009e8 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000b3a:	033a      	lsls	r2, r7, #12
 8000b3c:	d502      	bpl.n	8000b44 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000b3e:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000b42:	e751      	b.n	80009e8 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000b44:	4628      	mov	r0, r5
 8000b46:	f7ff ff14 	bl	8000972 <HAL_CAN_TxMailbox2AbortCallback>
 8000b4a:	e74d      	b.n	80009e8 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000b4c:	2b50      	cmp	r3, #80	; 0x50
 8000b4e:	d00f      	beq.n	8000b70 <HAL_CAN_IRQHandler+0x1f0>
 8000b50:	2b60      	cmp	r3, #96	; 0x60
 8000b52:	d010      	beq.n	8000b76 <HAL_CAN_IRQHandler+0x1f6>
 8000b54:	2b40      	cmp	r3, #64	; 0x40
 8000b56:	d1c0      	bne.n	8000ada <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b58:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000b5c:	e7bd      	b.n	8000ada <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b5e:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000b62:	e7ba      	b.n	8000ada <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b64:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000b68:	e7b7      	b.n	8000ada <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b6a:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000b6e:	e7b4      	b.n	8000ada <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b70:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000b74:	e7b1      	b.n	8000ada <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b76:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000b7a:	e7ae      	b.n	8000ada <HAL_CAN_IRQHandler+0x15a>

08000b7c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b7e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b84:	041b      	lsls	r3, r3, #16
 8000b86:	0c1b      	lsrs	r3, r3, #16
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	0200      	lsls	r0, r0, #8
 8000b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b92:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b96:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b98:	60d3      	str	r3, [r2, #12]
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba2:	b530      	push	{r4, r5, lr}
 8000ba4:	68dc      	ldr	r4, [r3, #12]
 8000ba6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000baa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	bf28      	it	cs
 8000bb4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 0501 	mov.w	r5, #1
 8000bbc:	fa05 f303 	lsl.w	r3, r5, r3
 8000bc0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc4:	bf8c      	ite	hi
 8000bc6:	3c03      	subhi	r4, #3
 8000bc8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bca:	4019      	ands	r1, r3
 8000bcc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bce:	fa05 f404 	lsl.w	r4, r5, r4
 8000bd2:	3c01      	subs	r4, #1
 8000bd4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	ea42 0201 	orr.w	r2, r2, r1
 8000bdc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	bfad      	iteet	ge
 8000be2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	f000 000f 	andlt.w	r0, r0, #15
 8000bea:	4b06      	ldrlt	r3, [pc, #24]	; (8000c04 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	bfb5      	itete	lt
 8000bf2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bfc:	bd30      	pop	{r4, r5, pc}
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00
 8000c04:	e000ed14 	.word	0xe000ed14

08000c08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	db08      	blt.n	8000c1e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0c:	0942      	lsrs	r2, r0, #5
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f000 001f 	and.w	r0, r0, #31
 8000c14:	fa03 f000 	lsl.w	r0, r3, r0
 8000c18:	4b01      	ldr	r3, [pc, #4]	; (8000c20 <HAL_NVIC_EnableIRQ+0x18>)
 8000c1a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	3801      	subs	r0, #1
 8000c26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2a:	d20a      	bcs.n	8000c42 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c30:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	21f0      	movs	r1, #240	; 0xf0
 8000c34:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c52:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c54:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c56:	bf0c      	ite	eq
 8000c58:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c5c:	f022 0204 	bicne.w	r2, r2, #4
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	4770      	bx	lr
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c68:	4770      	bx	lr

08000c6a <HAL_SYSTICK_IRQHandler>:
{
 8000c6a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c6c:	f7ff fffc 	bl	8000c68 <HAL_SYSTICK_Callback>
 8000c70:	bd08      	pop	{r3, pc}

08000c72 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c72:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8000c76:	2a02      	cmp	r2, #2
{
 8000c78:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c7a:	d003      	beq.n	8000c84 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000c80:	2001      	movs	r0, #1
 8000c82:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c84:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c86:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c88:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c8c:	f021 010e 	bic.w	r1, r1, #14
 8000c90:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000c92:	6811      	ldr	r1, [r2, #0]
 8000c94:	f021 0101 	bic.w	r1, r1, #1
 8000c98:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	f002 021c 	and.w	r2, r2, #28
 8000ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca6:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000ca8:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000caa:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000cae:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8000cb2:	b113      	cbz	r3, 8000cba <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 8000cb4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	bd10      	pop	{r4, pc}
 8000cba:	4618      	mov	r0, r3
    }
  }
  return status;
}
 8000cbc:	bd10      	pop	{r4, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000e74 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ccc:	4c67      	ldr	r4, [pc, #412]	; (8000e6c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000cd0:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	9a01      	ldr	r2, [sp, #4]
 8000cd4:	40da      	lsrs	r2, r3
 8000cd6:	d102      	bne.n	8000cde <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000cd8:	b005      	add	sp, #20
 8000cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cde:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000ce0:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce2:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000ce4:	ea12 0e06 	ands.w	lr, r2, r6
 8000ce8:	f000 80b1 	beq.w	8000e4e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cec:	684a      	ldr	r2, [r1, #4]
 8000cee:	f022 0710 	bic.w	r7, r2, #16
 8000cf2:	2f02      	cmp	r7, #2
 8000cf4:	d116      	bne.n	8000d24 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8000cf6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000cfa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cfe:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000d02:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d06:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000d0a:	f04f 0c0f 	mov.w	ip, #15
 8000d0e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000d12:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d16:	690d      	ldr	r5, [r1, #16]
 8000d18:	fa05 f50a 	lsl.w	r5, r5, sl
 8000d1c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000d20:	f8c9 5020 	str.w	r5, [r9, #32]
 8000d24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d28:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000d2a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d2e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000d32:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d34:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d38:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d40:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d42:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d46:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000d48:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4c:	d811      	bhi.n	8000d72 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000d4e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d50:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d54:	68cf      	ldr	r7, [r1, #12]
 8000d56:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d5a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000d5e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d60:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d62:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d66:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000d6a:	409f      	lsls	r7, r3
 8000d6c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000d70:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d72:	f1ba 0f03 	cmp.w	sl, #3
 8000d76:	d107      	bne.n	8000d88 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000d78:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d7a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000d7e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000d82:	409f      	lsls	r7, r3
 8000d84:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000d86:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000d88:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d8a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d8c:	688e      	ldr	r6, [r1, #8]
 8000d8e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d92:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000d94:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d96:	00d5      	lsls	r5, r2, #3
 8000d98:	d559      	bpl.n	8000e4e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000d9e:	f045 0501 	orr.w	r5, r5, #1
 8000da2:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000da6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000daa:	f023 0603 	bic.w	r6, r3, #3
 8000dae:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000db2:	f005 0501 	and.w	r5, r5, #1
 8000db6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000dba:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dbc:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000dc2:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dc4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000dc8:	270f      	movs	r7, #15
 8000dca:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dce:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd2:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dd6:	d03c      	beq.n	8000e52 <HAL_GPIO_Init+0x192>
 8000dd8:	4d25      	ldr	r5, [pc, #148]	; (8000e70 <HAL_GPIO_Init+0x1b0>)
 8000dda:	42a8      	cmp	r0, r5
 8000ddc:	d03b      	beq.n	8000e56 <HAL_GPIO_Init+0x196>
 8000dde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000de2:	42a8      	cmp	r0, r5
 8000de4:	d039      	beq.n	8000e5a <HAL_GPIO_Init+0x19a>
 8000de6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dea:	42a8      	cmp	r0, r5
 8000dec:	d037      	beq.n	8000e5e <HAL_GPIO_Init+0x19e>
 8000dee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000df2:	42a8      	cmp	r0, r5
 8000df4:	d035      	beq.n	8000e62 <HAL_GPIO_Init+0x1a2>
 8000df6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dfa:	42a8      	cmp	r0, r5
 8000dfc:	d033      	beq.n	8000e66 <HAL_GPIO_Init+0x1a6>
 8000dfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e02:	42a8      	cmp	r0, r5
 8000e04:	bf14      	ite	ne
 8000e06:	2507      	movne	r5, #7
 8000e08:	2506      	moveq	r5, #6
 8000e0a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e0e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e10:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000e12:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000e14:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e18:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8000e1a:	bf54      	ite	pl
 8000e1c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000e1e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000e22:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000e24:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e26:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000e28:	bf54      	ite	pl
 8000e2a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000e2c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000e30:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000e32:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e34:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8000e36:	bf54      	ite	pl
 8000e38:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000e3a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000e3e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000e40:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e42:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8000e44:	bf54      	ite	pl
 8000e46:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000e48:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000e4c:	60e5      	str	r5, [r4, #12]
    position++;
 8000e4e:	3301      	adds	r3, #1
 8000e50:	e73f      	b.n	8000cd2 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e52:	2500      	movs	r5, #0
 8000e54:	e7d9      	b.n	8000e0a <HAL_GPIO_Init+0x14a>
 8000e56:	2501      	movs	r5, #1
 8000e58:	e7d7      	b.n	8000e0a <HAL_GPIO_Init+0x14a>
 8000e5a:	2502      	movs	r5, #2
 8000e5c:	e7d5      	b.n	8000e0a <HAL_GPIO_Init+0x14a>
 8000e5e:	2503      	movs	r5, #3
 8000e60:	e7d3      	b.n	8000e0a <HAL_GPIO_Init+0x14a>
 8000e62:	2504      	movs	r5, #4
 8000e64:	e7d1      	b.n	8000e0a <HAL_GPIO_Init+0x14a>
 8000e66:	2505      	movs	r5, #5
 8000e68:	e7cf      	b.n	8000e0a <HAL_GPIO_Init+0x14a>
 8000e6a:	bf00      	nop
 8000e6c:	40010400 	.word	0x40010400
 8000e70:	48000400 	.word	0x48000400
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e78:	b10a      	cbz	r2, 8000e7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e7a:	6181      	str	r1, [r0, #24]
 8000e7c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e7e:	6281      	str	r1, [r0, #40]	; 0x28
 8000e80:	4770      	bx	lr
	...

08000e84 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <HAL_PWREx_GetVoltageRange+0xc>)
 8000e86:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000e88:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40007000 	.word	0x40007000

08000e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e96:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e98:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e9c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ea0:	d11c      	bne.n	8000edc <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ea2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000ea6:	d015      	beq.n	8000ed4 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eb2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000eb4:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000eb6:	6811      	ldr	r1, [r2, #0]
 8000eb8:	2232      	movs	r2, #50	; 0x32
 8000eba:	434a      	muls	r2, r1
 8000ebc:	490f      	ldr	r1, [pc, #60]	; (8000efc <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000ebe:	fbb2 f2f1 	udiv	r2, r2, r1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec6:	6958      	ldr	r0, [r3, #20]
 8000ec8:	0540      	lsls	r0, r0, #21
 8000eca:	d500      	bpl.n	8000ece <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000ecc:	b922      	cbnz	r2, 8000ed8 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ece:	694b      	ldr	r3, [r1, #20]
 8000ed0:	055b      	lsls	r3, r3, #21
 8000ed2:	d40d      	bmi.n	8000ef0 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	4770      	bx	lr
        wait_loop_index--;
 8000ed8:	3a01      	subs	r2, #1
 8000eda:	e7f4      	b.n	8000ec6 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000edc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee0:	bf1f      	itttt	ne
 8000ee2:	681a      	ldrne	r2, [r3, #0]
 8000ee4:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000ee8:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000eec:	601a      	strne	r2, [r3, #0]
 8000eee:	e7f1      	b.n	8000ed4 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000ef0:	2003      	movs	r0, #3
}
 8000ef2:	4770      	bx	lr
 8000ef4:	40007000 	.word	0x40007000
 8000ef8:	20000014 	.word	0x20000014
 8000efc:	000f4240 	.word	0x000f4240

08000f00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000f02:	4d1e      	ldr	r5, [pc, #120]	; (8000f7c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000f04:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f06:	00da      	lsls	r2, r3, #3
{
 8000f08:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000f0a:	d518      	bpl.n	8000f3e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000f0c:	f7ff ffba 	bl	8000e84 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000f14:	d123      	bne.n	8000f5e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000f16:	2c80      	cmp	r4, #128	; 0x80
 8000f18:	d929      	bls.n	8000f6e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000f1a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000f1c:	bf8c      	ite	hi
 8000f1e:	2002      	movhi	r0, #2
 8000f20:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000f24:	6813      	ldr	r3, [r2, #0]
 8000f26:	f023 0307 	bic.w	r3, r3, #7
 8000f2a:	4303      	orrs	r3, r0
 8000f2c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000f34:	1a18      	subs	r0, r3, r0
 8000f36:	bf18      	it	ne
 8000f38:	2001      	movne	r0, #1
 8000f3a:	b003      	add	sp, #12
 8000f3c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	65ab      	str	r3, [r5, #88]	; 0x58
 8000f46:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000f50:	f7ff ff98 	bl	8000e84 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000f54:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	65ab      	str	r3, [r5, #88]	; 0x58
 8000f5c:	e7d8      	b.n	8000f10 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000f5e:	2c80      	cmp	r4, #128	; 0x80
 8000f60:	d807      	bhi.n	8000f72 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000f62:	d008      	beq.n	8000f76 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000f64:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000f68:	4258      	negs	r0, r3
 8000f6a:	4158      	adcs	r0, r3
 8000f6c:	e7d9      	b.n	8000f22 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000f6e:	2000      	movs	r0, #0
 8000f70:	e7d7      	b.n	8000f22 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000f72:	2003      	movs	r0, #3
 8000f74:	e7d5      	b.n	8000f22 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000f76:	2002      	movs	r0, #2
 8000f78:	e7d3      	b.n	8000f22 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40022000 	.word	0x40022000

08000f84 <HAL_RCC_DeInit>:
{
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000f86:	4c32      	ldr	r4, [pc, #200]	; (8001050 <HAL_RCC_DeInit+0xcc>)
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000f90:	f7ff faea 	bl	8000568 <HAL_GetTick>
 8000f94:	4605      	mov	r5, r0
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	079b      	lsls	r3, r3, #30
 8000f9a:	d543      	bpl.n	8001024 <HAL_RCC_DeInit+0xa0>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8000f9c:	6823      	ldr	r3, [r4, #0]
  SystemCoreClock = MSI_VALUE;
 8000f9e:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <HAL_RCC_DeInit+0xd0>)
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8000fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fa4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fa8:	6023      	str	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);
 8000faa:	2300      	movs	r3, #0
 8000fac:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = MSI_VALUE;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <HAL_RCC_DeInit+0xd4>)
 8000fb0:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_RCC_DeInit+0xd8>)
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	f7ff fa8f 	bl	80004d8 <HAL_InitTick>
 8000fba:	4605      	mov	r5, r0
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	d145      	bne.n	800104c <HAL_RCC_DeInit+0xc8>
  tickstart = HAL_GetTick();
 8000fc0:	f7ff fad2 	bl	8000568 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc4:	f241 3788 	movw	r7, #5000	; 0x1388
  tickstart = HAL_GetTick();
 8000fc8:	4606      	mov	r6, r0
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8000fca:	68a3      	ldr	r3, [r4, #8]
 8000fcc:	f013 0f0c 	tst.w	r3, #12
 8000fd0:	d130      	bne.n	8001034 <HAL_RCC_DeInit+0xb0>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 8000fd2:	6822      	ldr	r2, [r4, #0]
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_RCC_DeInit+0xdc>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000fda:	f7ff fac5 	bl	8000568 <HAL_GetTick>
 8000fde:	4606      	mov	r6, r0
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	f013 5328 	ands.w	r3, r3, #704643072	; 0x2a000000
 8000fe6:	d12b      	bne.n	8001040 <HAL_RCC_DeInit+0xbc>
  CLEAR_REG(RCC->PLLCFGR);
 8000fe8:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8000fea:	68e2      	ldr	r2, [r4, #12]
 8000fec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ff0:	60e2      	str	r2, [r4, #12]
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8000ff2:	6123      	str	r3, [r4, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8000ff4:	6922      	ldr	r2, [r4, #16]
 8000ff6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ffa:	6122      	str	r2, [r4, #16]
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8000ffc:	6163      	str	r3, [r4, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 8000ffe:	6962      	ldr	r2, [r4, #20]
 8001000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001004:	6162      	str	r2, [r4, #20]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001006:	6822      	ldr	r2, [r4, #0]
 8001008:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800100c:	6022      	str	r2, [r4, #0]
  CLEAR_REG(RCC->CIER);
 800100e:	61a3      	str	r3, [r4, #24]
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	6223      	str	r3, [r4, #32]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001016:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800101a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800101e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8001022:	e005      	b.n	8001030 <HAL_RCC_DeInit+0xac>
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001024:	f7ff faa0 	bl	8000568 <HAL_GetTick>
 8001028:	1b40      	subs	r0, r0, r5
 800102a:	2802      	cmp	r0, #2
 800102c:	d9b3      	bls.n	8000f96 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 800102e:	2503      	movs	r5, #3
}
 8001030:	4628      	mov	r0, r5
 8001032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001034:	f7ff fa98 	bl	8000568 <HAL_GetTick>
 8001038:	1b80      	subs	r0, r0, r6
 800103a:	42b8      	cmp	r0, r7
 800103c:	d9c5      	bls.n	8000fca <HAL_RCC_DeInit+0x46>
 800103e:	e7f6      	b.n	800102e <HAL_RCC_DeInit+0xaa>
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001040:	f7ff fa92 	bl	8000568 <HAL_GetTick>
 8001044:	1b80      	subs	r0, r0, r6
 8001046:	2802      	cmp	r0, #2
 8001048:	d9ca      	bls.n	8000fe0 <HAL_RCC_DeInit+0x5c>
 800104a:	e7f0      	b.n	800102e <HAL_RCC_DeInit+0xaa>
    return HAL_ERROR;
 800104c:	2501      	movs	r5, #1
 800104e:	e7ef      	b.n	8001030 <HAL_RCC_DeInit+0xac>
 8001050:	40021000 	.word	0x40021000
 8001054:	003d0900 	.word	0x003d0900
 8001058:	20000014 	.word	0x20000014
 800105c:	20000004 	.word	0x20000004
 8001060:	eafef4ff 	.word	0xeafef4ff

08001064 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001066:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001068:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800106a:	f012 020c 	ands.w	r2, r2, #12
 800106e:	d005      	beq.n	800107c <HAL_RCC_GetSysClockFreq+0x18>
 8001070:	2a0c      	cmp	r2, #12
 8001072:	d115      	bne.n	80010a0 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001074:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001078:	2901      	cmp	r1, #1
 800107a:	d118      	bne.n	80010ae <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800107c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800107e:	481d      	ldr	r0, [pc, #116]	; (80010f4 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001080:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001082:	bf55      	itete	pl
 8001084:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001088:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800108a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800108e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001092:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001096:	b34a      	cbz	r2, 80010ec <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001098:	2a0c      	cmp	r2, #12
 800109a:	d009      	beq.n	80010b0 <HAL_RCC_GetSysClockFreq+0x4c>
 800109c:	2000      	movs	r0, #0
  return sysclockfreq;
 800109e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80010a0:	2a04      	cmp	r2, #4
 80010a2:	d022      	beq.n	80010ea <HAL_RCC_GetSysClockFreq+0x86>
 80010a4:	2a08      	cmp	r2, #8
 80010a6:	4814      	ldr	r0, [pc, #80]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80010a8:	bf18      	it	ne
 80010aa:	2000      	movne	r0, #0
 80010ac:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80010ae:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80010b6:	2a02      	cmp	r2, #2
 80010b8:	d015      	beq.n	80010e6 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 80010ba:	490f      	ldr	r1, [pc, #60]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80010bc:	2a03      	cmp	r2, #3
 80010be:	bf08      	it	eq
 80010c0:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80010c2:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80010c4:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80010cc:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80010d0:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80010d4:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80010d6:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80010d8:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80010da:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80010dc:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 80010e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80010e4:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_RCC_GetSysClockFreq+0x98>)
 80010e8:	e7eb      	b.n	80010c2 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <HAL_RCC_GetSysClockFreq+0x98>)
}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	08002310 	.word	0x08002310
 80010f8:	007a1200 	.word	0x007a1200
 80010fc:	00f42400 	.word	0x00f42400

08001100 <HAL_RCC_OscConfig>:
{
 8001100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001104:	4605      	mov	r5, r0
 8001106:	b908      	cbnz	r0, 800110c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001108:	2001      	movs	r0, #1
 800110a:	e047      	b.n	800119c <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110c:	4ca6      	ldr	r4, [pc, #664]	; (80013a8 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800110e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001110:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001112:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001114:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001116:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800111a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800111e:	d573      	bpl.n	8001208 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001120:	b11e      	cbz	r6, 800112a <HAL_RCC_OscConfig+0x2a>
 8001122:	2e0c      	cmp	r6, #12
 8001124:	d152      	bne.n	80011cc <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001126:	2f01      	cmp	r7, #1
 8001128:	d150      	bne.n	80011cc <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	0798      	lsls	r0, r3, #30
 800112e:	d502      	bpl.n	8001136 <HAL_RCC_OscConfig+0x36>
 8001130:	69ab      	ldr	r3, [r5, #24]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0e8      	beq.n	8001108 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	6a28      	ldr	r0, [r5, #32]
 800113a:	0719      	lsls	r1, r3, #28
 800113c:	bf56      	itet	pl
 800113e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001142:	6823      	ldrmi	r3, [r4, #0]
 8001144:	091b      	lsrpl	r3, r3, #4
 8001146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800114a:	4283      	cmp	r3, r0
 800114c:	d229      	bcs.n	80011a2 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800114e:	f7ff fed7 	bl	8000f00 <RCC_SetFlashLatencyFromMSIRange>
 8001152:	2800      	cmp	r0, #0
 8001154:	d1d8      	bne.n	8001108 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6023      	str	r3, [r4, #0]
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	6a2a      	ldr	r2, [r5, #32]
 8001162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001166:	4313      	orrs	r3, r2
 8001168:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116a:	6863      	ldr	r3, [r4, #4]
 800116c:	69ea      	ldr	r2, [r5, #28]
 800116e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001172:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001176:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001178:	f7ff ff74 	bl	8001064 <HAL_RCC_GetSysClockFreq>
 800117c:	68a3      	ldr	r3, [r4, #8]
 800117e:	4a8b      	ldr	r2, [pc, #556]	; (80013ac <HAL_RCC_OscConfig+0x2ac>)
 8001180:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001184:	5cd3      	ldrb	r3, [r2, r3]
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	40d8      	lsrs	r0, r3
 800118c:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <HAL_RCC_OscConfig+0x2b0>)
 800118e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001190:	4b88      	ldr	r3, [pc, #544]	; (80013b4 <HAL_RCC_OscConfig+0x2b4>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	f7ff f9a0 	bl	80004d8 <HAL_InitTick>
        if(status != HAL_OK)
 8001198:	2800      	cmp	r0, #0
 800119a:	d035      	beq.n	8001208 <HAL_RCC_OscConfig+0x108>
}
 800119c:	b003      	add	sp, #12
 800119e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011b0:	4303      	orrs	r3, r0
 80011b2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	69ea      	ldr	r2, [r5, #28]
 80011b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80011bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011c0:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011c2:	f7ff fe9d 	bl	8000f00 <RCC_SetFlashLatencyFromMSIRange>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d0d6      	beq.n	8001178 <HAL_RCC_OscConfig+0x78>
 80011ca:	e79d      	b.n	8001108 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011cc:	69ab      	ldr	r3, [r5, #24]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d036      	beq.n	8001240 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011da:	f7ff f9c5 	bl	8000568 <HAL_GetTick>
 80011de:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	079a      	lsls	r2, r3, #30
 80011e4:	d524      	bpl.n	8001230 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	6023      	str	r3, [r4, #0]
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	6a2a      	ldr	r2, [r5, #32]
 80011f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011f6:	4313      	orrs	r3, r2
 80011f8:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011fa:	6863      	ldr	r3, [r4, #4]
 80011fc:	69ea      	ldr	r2, [r5, #28]
 80011fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001202:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001206:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	07d8      	lsls	r0, r3, #31
 800120c:	d429      	bmi.n	8001262 <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	682b      	ldr	r3, [r5, #0]
 8001210:	0799      	lsls	r1, r3, #30
 8001212:	d467      	bmi.n	80012e4 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	0718      	lsls	r0, r3, #28
 8001218:	f100 809c 	bmi.w	8001354 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	0759      	lsls	r1, r3, #29
 8001220:	f100 80ca 	bmi.w	80013b8 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001224:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001226:	2800      	cmp	r0, #0
 8001228:	f040 8133 	bne.w	8001492 <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 800122c:	2000      	movs	r0, #0
 800122e:	e7b5      	b.n	800119c <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001230:	f7ff f99a 	bl	8000568 <HAL_GetTick>
 8001234:	eba0 0008 	sub.w	r0, r0, r8
 8001238:	2802      	cmp	r0, #2
 800123a:	d9d1      	bls.n	80011e0 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 800123c:	2003      	movs	r0, #3
 800123e:	e7ad      	b.n	800119c <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	f023 0301 	bic.w	r3, r3, #1
 8001246:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001248:	f7ff f98e 	bl	8000568 <HAL_GetTick>
 800124c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	079b      	lsls	r3, r3, #30
 8001252:	d5d9      	bpl.n	8001208 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001254:	f7ff f988 	bl	8000568 <HAL_GetTick>
 8001258:	eba0 0008 	sub.w	r0, r0, r8
 800125c:	2802      	cmp	r0, #2
 800125e:	d9f6      	bls.n	800124e <HAL_RCC_OscConfig+0x14e>
 8001260:	e7ec      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001262:	2e08      	cmp	r6, #8
 8001264:	d003      	beq.n	800126e <HAL_RCC_OscConfig+0x16e>
 8001266:	2e0c      	cmp	r6, #12
 8001268:	d108      	bne.n	800127c <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800126a:	2f03      	cmp	r7, #3
 800126c:	d106      	bne.n	800127c <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	039a      	lsls	r2, r3, #14
 8001272:	d5cc      	bpl.n	800120e <HAL_RCC_OscConfig+0x10e>
 8001274:	686b      	ldr	r3, [r5, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1c9      	bne.n	800120e <HAL_RCC_OscConfig+0x10e>
 800127a:	e745      	b.n	8001108 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127c:	686b      	ldr	r3, [r5, #4]
 800127e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001282:	d110      	bne.n	80012a6 <HAL_RCC_OscConfig+0x1a6>
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800128c:	f7ff f96c 	bl	8000568 <HAL_GetTick>
 8001290:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	039b      	lsls	r3, r3, #14
 8001296:	d4ba      	bmi.n	800120e <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff f966 	bl	8000568 <HAL_GetTick>
 800129c:	eba0 0008 	sub.w	r0, r0, r8
 80012a0:	2864      	cmp	r0, #100	; 0x64
 80012a2:	d9f6      	bls.n	8001292 <HAL_RCC_OscConfig+0x192>
 80012a4:	e7ca      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012aa:	d104      	bne.n	80012b6 <HAL_RCC_OscConfig+0x1b6>
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b2:	6023      	str	r3, [r4, #0]
 80012b4:	e7e6      	b.n	8001284 <HAL_RCC_OscConfig+0x184>
 80012b6:	6822      	ldr	r2, [r4, #0]
 80012b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012bc:	6022      	str	r2, [r4, #0]
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012c4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1e0      	bne.n	800128c <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 80012ca:	f7ff f94d 	bl	8000568 <HAL_GetTick>
 80012ce:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	0398      	lsls	r0, r3, #14
 80012d4:	d59b      	bpl.n	800120e <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d6:	f7ff f947 	bl	8000568 <HAL_GetTick>
 80012da:	eba0 0008 	sub.w	r0, r0, r8
 80012de:	2864      	cmp	r0, #100	; 0x64
 80012e0:	d9f6      	bls.n	80012d0 <HAL_RCC_OscConfig+0x1d0>
 80012e2:	e7ab      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012e4:	2e04      	cmp	r6, #4
 80012e6:	d003      	beq.n	80012f0 <HAL_RCC_OscConfig+0x1f0>
 80012e8:	2e0c      	cmp	r6, #12
 80012ea:	d110      	bne.n	800130e <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012ec:	2f02      	cmp	r7, #2
 80012ee:	d10e      	bne.n	800130e <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	0559      	lsls	r1, r3, #21
 80012f4:	d503      	bpl.n	80012fe <HAL_RCC_OscConfig+0x1fe>
 80012f6:	68eb      	ldr	r3, [r5, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f43f af05 	beq.w	8001108 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	6863      	ldr	r3, [r4, #4]
 8001300:	692a      	ldr	r2, [r5, #16]
 8001302:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001306:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800130a:	6063      	str	r3, [r4, #4]
 800130c:	e782      	b.n	8001214 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130e:	68eb      	ldr	r3, [r5, #12]
 8001310:	b17b      	cbz	r3, 8001332 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800131a:	f7ff f925 	bl	8000568 <HAL_GetTick>
 800131e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	055a      	lsls	r2, r3, #21
 8001324:	d4eb      	bmi.n	80012fe <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff f91f 	bl	8000568 <HAL_GetTick>
 800132a:	1bc0      	subs	r0, r0, r7
 800132c:	2802      	cmp	r0, #2
 800132e:	d9f7      	bls.n	8001320 <HAL_RCC_OscConfig+0x220>
 8001330:	e784      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001338:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800133a:	f7ff f915 	bl	8000568 <HAL_GetTick>
 800133e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	055b      	lsls	r3, r3, #21
 8001344:	f57f af66 	bpl.w	8001214 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff f90e 	bl	8000568 <HAL_GetTick>
 800134c:	1bc0      	subs	r0, r0, r7
 800134e:	2802      	cmp	r0, #2
 8001350:	d9f6      	bls.n	8001340 <HAL_RCC_OscConfig+0x240>
 8001352:	e773      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001354:	696b      	ldr	r3, [r5, #20]
 8001356:	b19b      	cbz	r3, 8001380 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8001358:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001364:	f7ff f900 	bl	8000568 <HAL_GetTick>
 8001368:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800136a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800136e:	079a      	lsls	r2, r3, #30
 8001370:	f53f af54 	bmi.w	800121c <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff f8f8 	bl	8000568 <HAL_GetTick>
 8001378:	1bc0      	subs	r0, r0, r7
 800137a:	2802      	cmp	r0, #2
 800137c:	d9f5      	bls.n	800136a <HAL_RCC_OscConfig+0x26a>
 800137e:	e75d      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8001380:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001384:	f023 0301 	bic.w	r3, r3, #1
 8001388:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800138c:	f7ff f8ec 	bl	8000568 <HAL_GetTick>
 8001390:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001392:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001396:	079b      	lsls	r3, r3, #30
 8001398:	f57f af40 	bpl.w	800121c <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff f8e4 	bl	8000568 <HAL_GetTick>
 80013a0:	1bc0      	subs	r0, r0, r7
 80013a2:	2802      	cmp	r0, #2
 80013a4:	d9f5      	bls.n	8001392 <HAL_RCC_OscConfig+0x292>
 80013a6:	e749      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
 80013a8:	40021000 	.word	0x40021000
 80013ac:	080022f5 	.word	0x080022f5
 80013b0:	20000014 	.word	0x20000014
 80013b4:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013ba:	00d8      	lsls	r0, r3, #3
 80013bc:	d429      	bmi.n	8001412 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80013c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013d0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d4:	4f79      	ldr	r7, [pc, #484]	; (80015bc <HAL_RCC_OscConfig+0x4bc>)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	05d9      	lsls	r1, r3, #23
 80013da:	d51d      	bpl.n	8001418 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013dc:	68ab      	ldr	r3, [r5, #8]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d12b      	bne.n	800143a <HAL_RCC_OscConfig+0x33a>
 80013e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80013ee:	f7ff f8bb 	bl	8000568 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013f6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80013fc:	079b      	lsls	r3, r3, #30
 80013fe:	d542      	bpl.n	8001486 <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8001400:	f1b8 0f00 	cmp.w	r8, #0
 8001404:	f43f af0e 	beq.w	8001224 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800140a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800140e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001410:	e708      	b.n	8001224 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8001412:	f04f 0800 	mov.w	r8, #0
 8001416:	e7dd      	b.n	80013d4 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001420:	f7ff f8a2 	bl	8000568 <HAL_GetTick>
 8001424:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	05da      	lsls	r2, r3, #23
 800142a:	d4d7      	bmi.n	80013dc <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142c:	f7ff f89c 	bl	8000568 <HAL_GetTick>
 8001430:	eba0 0009 	sub.w	r0, r0, r9
 8001434:	2802      	cmp	r0, #2
 8001436:	d9f6      	bls.n	8001426 <HAL_RCC_OscConfig+0x326>
 8001438:	e700      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	2b05      	cmp	r3, #5
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0x34c>
 800143e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800144a:	e7ca      	b.n	80013e2 <HAL_RCC_OscConfig+0x2e2>
 800144c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001458:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800145c:	f022 0204 	bic.w	r2, r2, #4
 8001460:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1c2      	bne.n	80013ee <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8001468:	f7ff f87e 	bl	8000568 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001470:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001472:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001476:	0798      	lsls	r0, r3, #30
 8001478:	d5c2      	bpl.n	8001400 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff f875 	bl	8000568 <HAL_GetTick>
 800147e:	1bc0      	subs	r0, r0, r7
 8001480:	4548      	cmp	r0, r9
 8001482:	d9f6      	bls.n	8001472 <HAL_RCC_OscConfig+0x372>
 8001484:	e6da      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff f86f 	bl	8000568 <HAL_GetTick>
 800148a:	1bc0      	subs	r0, r0, r7
 800148c:	4548      	cmp	r0, r9
 800148e:	d9b3      	bls.n	80013f8 <HAL_RCC_OscConfig+0x2f8>
 8001490:	e6d4      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001492:	2e0c      	cmp	r6, #12
 8001494:	d05c      	beq.n	8001550 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 8001496:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001498:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800149a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800149e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014a0:	d13b      	bne.n	800151a <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 80014a2:	f7ff f861 	bl	8000568 <HAL_GetTick>
 80014a6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	0199      	lsls	r1, r3, #6
 80014ac:	d42f      	bmi.n	800150e <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ae:	68e2      	ldr	r2, [r4, #12]
 80014b0:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <HAL_RCC_OscConfig+0x4c0>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80014b6:	4313      	orrs	r3, r2
 80014b8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80014ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80014c0:	3a01      	subs	r2, #1
 80014c2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80014c6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80014c8:	0912      	lsrs	r2, r2, #4
 80014ca:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80014ce:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80014d0:	0852      	lsrs	r2, r2, #1
 80014d2:	3a01      	subs	r2, #1
 80014d4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80014d8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80014da:	0852      	lsrs	r2, r2, #1
 80014dc:	3a01      	subs	r2, #1
 80014de:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80014e2:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ea:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014ec:	68e3      	ldr	r3, [r4, #12]
 80014ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014f2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80014f4:	f7ff f838 	bl	8000568 <HAL_GetTick>
 80014f8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	019a      	lsls	r2, r3, #6
 80014fe:	f53f ae95 	bmi.w	800122c <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff f831 	bl	8000568 <HAL_GetTick>
 8001506:	1b40      	subs	r0, r0, r5
 8001508:	2802      	cmp	r0, #2
 800150a:	d9f6      	bls.n	80014fa <HAL_RCC_OscConfig+0x3fa>
 800150c:	e696      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150e:	f7ff f82b 	bl	8000568 <HAL_GetTick>
 8001512:	1b80      	subs	r0, r0, r6
 8001514:	2802      	cmp	r0, #2
 8001516:	d9c7      	bls.n	80014a8 <HAL_RCC_OscConfig+0x3a8>
 8001518:	e690      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001520:	bf02      	ittt	eq
 8001522:	68e3      	ldreq	r3, [r4, #12]
 8001524:	f023 0303 	biceq.w	r3, r3, #3
 8001528:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800152a:	68e3      	ldr	r3, [r4, #12]
 800152c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001534:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001536:	f7ff f817 	bl	8000568 <HAL_GetTick>
 800153a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	019b      	lsls	r3, r3, #6
 8001540:	f57f ae74 	bpl.w	800122c <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff f810 	bl	8000568 <HAL_GetTick>
 8001548:	1b40      	subs	r0, r0, r5
 800154a:	2802      	cmp	r0, #2
 800154c:	d9f6      	bls.n	800153c <HAL_RCC_OscConfig+0x43c>
 800154e:	e675      	b.n	800123c <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001550:	2801      	cmp	r0, #1
 8001552:	f43f ae23 	beq.w	800119c <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8001556:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001558:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800155a:	f003 0103 	and.w	r1, r3, #3
 800155e:	4291      	cmp	r1, r2
 8001560:	f47f add2 	bne.w	8001108 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001564:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001566:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800156a:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800156c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001570:	f47f adca 	bne.w	8001108 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001574:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001576:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800157a:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800157e:	f47f adc3 	bne.w	8001108 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001582:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001584:	3a07      	subs	r2, #7
 8001586:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800158a:	bf18      	it	ne
 800158c:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800158e:	4291      	cmp	r1, r2
 8001590:	f47f adba 	bne.w	8001108 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001594:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001596:	0852      	lsrs	r2, r2, #1
 8001598:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800159c:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800159e:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80015a2:	f47f adb1 	bne.w	8001108 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015a6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80015a8:	0852      	lsrs	r2, r2, #1
 80015aa:	3a01      	subs	r2, #1
 80015ac:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015b0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80015b4:	bf14      	ite	ne
 80015b6:	2001      	movne	r0, #1
 80015b8:	2000      	moveq	r0, #0
 80015ba:	e5ef      	b.n	800119c <HAL_RCC_OscConfig+0x9c>
 80015bc:	40007000 	.word	0x40007000
 80015c0:	f99d808c 	.word	0xf99d808c

080015c4 <HAL_RCC_ClockConfig>:
{
 80015c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015c8:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80015ca:	4604      	mov	r4, r0
 80015cc:	b910      	cbnz	r0, 80015d4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80015ce:	2001      	movs	r0, #1
 80015d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4a41      	ldr	r2, [pc, #260]	; (80016dc <HAL_RCC_ClockConfig+0x118>)
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	428b      	cmp	r3, r1
 80015de:	d32a      	bcc.n	8001636 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	07d9      	lsls	r1, r3, #31
 80015e4:	d432      	bmi.n	800164c <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e6:	6821      	ldr	r1, [r4, #0]
 80015e8:	078a      	lsls	r2, r1, #30
 80015ea:	d45c      	bmi.n	80016a6 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015ec:	4a3b      	ldr	r2, [pc, #236]	; (80016dc <HAL_RCC_ClockConfig+0x118>)
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	429e      	cmp	r6, r3
 80015f6:	d35e      	bcc.n	80016b6 <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	f011 0f04 	tst.w	r1, #4
 80015fc:	4d38      	ldr	r5, [pc, #224]	; (80016e0 <HAL_RCC_ClockConfig+0x11c>)
 80015fe:	d165      	bne.n	80016cc <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	070b      	lsls	r3, r1, #28
 8001602:	d506      	bpl.n	8001612 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001604:	68ab      	ldr	r3, [r5, #8]
 8001606:	6922      	ldr	r2, [r4, #16]
 8001608:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800160c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001610:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001612:	f7ff fd27 	bl	8001064 <HAL_RCC_GetSysClockFreq>
 8001616:	68ab      	ldr	r3, [r5, #8]
 8001618:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <HAL_RCC_ClockConfig+0x120>)
 800161a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800161e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	40d8      	lsrs	r0, r3
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_RCC_ClockConfig+0x124>)
 800162c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_RCC_ClockConfig+0x128>)
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	f7fe bf51 	b.w	80004d8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	6813      	ldr	r3, [r2, #0]
 8001638:	f023 0307 	bic.w	r3, r3, #7
 800163c:	430b      	orrs	r3, r1
 800163e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	4299      	cmp	r1, r3
 8001648:	d1c1      	bne.n	80015ce <HAL_RCC_ClockConfig+0xa>
 800164a:	e7c9      	b.n	80015e0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800164c:	6862      	ldr	r2, [r4, #4]
 800164e:	4d24      	ldr	r5, [pc, #144]	; (80016e0 <HAL_RCC_ClockConfig+0x11c>)
 8001650:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001652:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001654:	d11b      	bne.n	800168e <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001656:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165a:	d0b8      	beq.n	80015ce <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800165c:	68ab      	ldr	r3, [r5, #8]
 800165e:	f023 0303 	bic.w	r3, r3, #3
 8001662:	4313      	orrs	r3, r2
 8001664:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001666:	f7fe ff7f 	bl	8000568 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800166e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001670:	68ab      	ldr	r3, [r5, #8]
 8001672:	6862      	ldr	r2, [r4, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800167c:	d0b3      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167e:	f7fe ff73 	bl	8000568 <HAL_GetTick>
 8001682:	1bc0      	subs	r0, r0, r7
 8001684:	4540      	cmp	r0, r8
 8001686:	d9f3      	bls.n	8001670 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8001688:	2003      	movs	r0, #3
}
 800168a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168e:	2a02      	cmp	r2, #2
 8001690:	d102      	bne.n	8001698 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001692:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001696:	e7e0      	b.n	800165a <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001698:	b912      	cbnz	r2, 80016a0 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169a:	f013 0f02 	tst.w	r3, #2
 800169e:	e7dc      	b.n	800165a <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80016a4:	e7d9      	b.n	800165a <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_RCC_ClockConfig+0x11c>)
 80016a8:	68a0      	ldr	r0, [r4, #8]
 80016aa:	6893      	ldr	r3, [r2, #8]
 80016ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016b0:	4303      	orrs	r3, r0
 80016b2:	6093      	str	r3, [r2, #8]
 80016b4:	e79a      	b.n	80015ec <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	6813      	ldr	r3, [r2, #0]
 80016b8:	f023 0307 	bic.w	r3, r3, #7
 80016bc:	4333      	orrs	r3, r6
 80016be:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c0:	6813      	ldr	r3, [r2, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	429e      	cmp	r6, r3
 80016c8:	d181      	bne.n	80015ce <HAL_RCC_ClockConfig+0xa>
 80016ca:	e795      	b.n	80015f8 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	68ab      	ldr	r3, [r5, #8]
 80016ce:	68e2      	ldr	r2, [r4, #12]
 80016d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60ab      	str	r3, [r5, #8]
 80016d8:	e792      	b.n	8001600 <HAL_RCC_ClockConfig+0x3c>
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	080022f5 	.word	0x080022f5
 80016e8:	20000014 	.word	0x20000014
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK1Freq+0x18>)
 80016f2:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80016fa:	5cd3      	ldrb	r3, [r2, r3]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016fe:	6810      	ldr	r0, [r2, #0]
 8001700:	f003 031f 	and.w	r3, r3, #31
}
 8001704:	40d8      	lsrs	r0, r3
 8001706:	4770      	bx	lr
 8001708:	40021000 	.word	0x40021000
 800170c:	08002305 	.word	0x08002305
 8001710:	20000014 	.word	0x20000014

08001714 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001716:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001722:	6810      	ldr	r0, [r2, #0]
 8001724:	f003 031f 	and.w	r3, r3, #31
}
 8001728:	40d8      	lsrs	r0, r3
 800172a:	4770      	bx	lr
 800172c:	40021000 	.word	0x40021000
 8001730:	08002305 	.word	0x08002305
 8001734:	20000014 	.word	0x20000014

08001738 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001738:	6803      	ldr	r3, [r0, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001740:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	f022 0201 	bic.w	r2, r2, #1
 8001748:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800174a:	2320      	movs	r3, #32
 800174c:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800174e:	2300      	movs	r3, #0
 8001750:	6603      	str	r3, [r0, #96]	; 0x60
 8001752:	4770      	bx	lr

08001754 <HAL_UART_TxCpltCallback>:
 8001754:	4770      	bx	lr

08001756 <HAL_UART_ErrorCallback>:
 8001756:	4770      	bx	lr

08001758 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001758:	6803      	ldr	r3, [r0, #0]
 800175a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800175c:	6819      	ldr	r1, [r3, #0]
{
 800175e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8001760:	0716      	lsls	r6, r2, #28
{
 8001762:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001764:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8001766:	d10a      	bne.n	800177e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001768:	0696      	lsls	r6, r2, #26
 800176a:	d564      	bpl.n	8001836 <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800176c:	068e      	lsls	r6, r1, #26
 800176e:	d562      	bpl.n	8001836 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8001770:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8082 	beq.w	800187c <HAL_UART_IRQHandler+0x124>
}
 8001778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800177c:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 800177e:	f015 0001 	ands.w	r0, r5, #1
 8001782:	d102      	bne.n	800178a <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001784:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001788:	d055      	beq.n	8001836 <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800178a:	07d5      	lsls	r5, r2, #31
 800178c:	d507      	bpl.n	800179e <HAL_UART_IRQHandler+0x46>
 800178e:	05ce      	lsls	r6, r1, #23
 8001790:	d505      	bpl.n	800179e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001792:	2501      	movs	r5, #1
 8001794:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001796:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001798:	f045 0501 	orr.w	r5, r5, #1
 800179c:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800179e:	0795      	lsls	r5, r2, #30
 80017a0:	d506      	bpl.n	80017b0 <HAL_UART_IRQHandler+0x58>
 80017a2:	b128      	cbz	r0, 80017b0 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80017a4:	2502      	movs	r5, #2
 80017a6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017a8:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80017aa:	f045 0504 	orr.w	r5, r5, #4
 80017ae:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80017b0:	0756      	lsls	r6, r2, #29
 80017b2:	d506      	bpl.n	80017c2 <HAL_UART_IRQHandler+0x6a>
 80017b4:	b128      	cbz	r0, 80017c2 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80017b6:	2504      	movs	r5, #4
 80017b8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017ba:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80017bc:	f045 0502 	orr.w	r5, r5, #2
 80017c0:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80017c2:	0715      	lsls	r5, r2, #28
 80017c4:	d507      	bpl.n	80017d6 <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80017c6:	068e      	lsls	r6, r1, #26
 80017c8:	d400      	bmi.n	80017cc <HAL_UART_IRQHandler+0x74>
 80017ca:	b120      	cbz	r0, 80017d6 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80017cc:	2008      	movs	r0, #8
 80017ce:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017d0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80017d2:	4303      	orrs	r3, r0
 80017d4:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017d6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d04f      	beq.n	800187c <HAL_UART_IRQHandler+0x124>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80017dc:	0695      	lsls	r5, r2, #26
 80017de:	d505      	bpl.n	80017ec <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80017e0:	0688      	lsls	r0, r1, #26
 80017e2:	d503      	bpl.n	80017ec <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 80017e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017e6:	b10b      	cbz	r3, 80017ec <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 80017e8:	4620      	mov	r0, r4
 80017ea:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80017ec:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80017ee:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80017f0:	6892      	ldr	r2, [r2, #8]
 80017f2:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 80017f4:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80017f6:	d402      	bmi.n	80017fe <HAL_UART_IRQHandler+0xa6>
 80017f8:	f015 0508 	ands.w	r5, r5, #8
 80017fc:	d017      	beq.n	800182e <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 80017fe:	f7ff ff9b 	bl	8001738 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	0652      	lsls	r2, r2, #25
 8001808:	d50d      	bpl.n	8001826 <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800180a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800180c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800180e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001812:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001814:	b138      	cbz	r0, 8001826 <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_UART_IRQHandler+0x128>)
 8001818:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800181a:	f7ff fa2a 	bl	8000c72 <HAL_DMA_Abort_IT>
 800181e:	b368      	cbz	r0, 800187c <HAL_UART_IRQHandler+0x124>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001820:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001822:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001824:	e7a8      	b.n	8001778 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8001826:	4620      	mov	r0, r4
 8001828:	f7ff ff95 	bl	8001756 <HAL_UART_ErrorCallback>
 800182c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800182e:	f7ff ff92 	bl	8001756 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001832:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001834:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001836:	02d6      	lsls	r6, r2, #11
 8001838:	d509      	bpl.n	800184e <HAL_UART_IRQHandler+0xf6>
 800183a:	0268      	lsls	r0, r5, #9
 800183c:	d507      	bpl.n	800184e <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800183e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8001842:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001844:	621a      	str	r2, [r3, #32]
}
 8001846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800184a:	f000 baf5 	b.w	8001e38 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800184e:	0616      	lsls	r6, r2, #24
 8001850:	d505      	bpl.n	800185e <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001852:	060d      	lsls	r5, r1, #24
 8001854:	d503      	bpl.n	800185e <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 8001856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001858:	b183      	cbz	r3, 800187c <HAL_UART_IRQHandler+0x124>
      huart->TxISR(huart);
 800185a:	4620      	mov	r0, r4
 800185c:	e78c      	b.n	8001778 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800185e:	0650      	lsls	r0, r2, #25
 8001860:	d50c      	bpl.n	800187c <HAL_UART_IRQHandler+0x124>
 8001862:	064a      	lsls	r2, r1, #25
 8001864:	d50a      	bpl.n	800187c <HAL_UART_IRQHandler+0x124>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800186c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800186e:	2320      	movs	r3, #32
 8001870:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001872:	2300      	movs	r3, #0
 8001874:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff ff6c 	bl	8001754 <HAL_UART_TxCpltCallback>
 800187c:	bd70      	pop	{r4, r5, r6, pc}
 800187e:	bf00      	nop
 8001880:	08001885 	.word	0x08001885

08001884 <UART_DMAAbortOnError>:
{
 8001884:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001886:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800188e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001892:	f7ff ff60 	bl	8001756 <HAL_UART_ErrorCallback>
 8001896:	bd08      	pop	{r3, pc}

08001898 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8001898:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800189a:	69c1      	ldr	r1, [r0, #28]
{
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018a0:	6883      	ldr	r3, [r0, #8]
 80018a2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018a4:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018a6:	4303      	orrs	r3, r0
 80018a8:	6960      	ldr	r0, [r4, #20]
 80018aa:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018ac:	48ba      	ldr	r0, [pc, #744]	; (8001b98 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018ae:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80018b0:	4028      	ands	r0, r5
 80018b2:	4303      	orrs	r3, r0
 80018b4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018b6:	6853      	ldr	r3, [r2, #4]
 80018b8:	68e0      	ldr	r0, [r4, #12]
 80018ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018be:	4303      	orrs	r3, r0
 80018c0:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80018c2:	4bb6      	ldr	r3, [pc, #728]	; (8001b9c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80018c4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80018c6:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 80018c8:	bf1c      	itt	ne
 80018ca:	6a23      	ldrne	r3, [r4, #32]
 80018cc:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80018ce:	6893      	ldr	r3, [r2, #8]
 80018d0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80018d4:	4303      	orrs	r3, r0
 80018d6:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018d8:	4bb1      	ldr	r3, [pc, #708]	; (8001ba0 <UART_SetConfig+0x308>)
 80018da:	429a      	cmp	r2, r3
 80018dc:	d119      	bne.n	8001912 <UART_SetConfig+0x7a>
 80018de:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80018e2:	4ab0      	ldr	r2, [pc, #704]	; (8001ba4 <UART_SetConfig+0x30c>)
 80018e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e8:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018ec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	f040 8138 	bne.w	8001b66 <UART_SetConfig+0x2ce>
    switch (clocksource)
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	f200 808f 	bhi.w	8001a1a <UART_SetConfig+0x182>
 80018fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001900:	00ca011a 	.word	0x00ca011a
 8001904:	008d00f9 	.word	0x008d00f9
 8001908:	008d0114 	.word	0x008d0114
 800190c:	008d008d 	.word	0x008d008d
 8001910:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001912:	4ba5      	ldr	r3, [pc, #660]	; (8001ba8 <UART_SetConfig+0x310>)
 8001914:	429a      	cmp	r2, r3
 8001916:	d107      	bne.n	8001928 <UART_SetConfig+0x90>
 8001918:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800191c:	4aa3      	ldr	r2, [pc, #652]	; (8001bac <UART_SetConfig+0x314>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	e7e1      	b.n	80018ec <UART_SetConfig+0x54>
 8001928:	4ba1      	ldr	r3, [pc, #644]	; (8001bb0 <UART_SetConfig+0x318>)
 800192a:	429a      	cmp	r2, r3
 800192c:	d123      	bne.n	8001976 <UART_SetConfig+0xde>
 800192e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001936:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800193a:	2b10      	cmp	r3, #16
 800193c:	f000 80f1 	beq.w	8001b22 <UART_SetConfig+0x28a>
 8001940:	d80b      	bhi.n	800195a <UART_SetConfig+0xc2>
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80f3 	beq.w	8001b2e <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001948:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 800194c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001950:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001954:	f000 80f8 	beq.w	8001b48 <UART_SetConfig+0x2b0>
 8001958:	e0a8      	b.n	8001aac <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800195a:	2b20      	cmp	r3, #32
 800195c:	f000 80c6 	beq.w	8001aec <UART_SetConfig+0x254>
 8001960:	2b30      	cmp	r3, #48	; 0x30
 8001962:	d1f1      	bne.n	8001948 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001964:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001968:	f040 80b8 	bne.w	8001adc <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800196c:	6860      	ldr	r0, [r4, #4]
 800196e:	0843      	lsrs	r3, r0, #1
 8001970:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001974:	e0c3      	b.n	8001afe <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001976:	4b8f      	ldr	r3, [pc, #572]	; (8001bb4 <UART_SetConfig+0x31c>)
 8001978:	429a      	cmp	r2, r3
 800197a:	d11e      	bne.n	80019ba <UART_SetConfig+0x122>
 800197c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001984:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001988:	2b40      	cmp	r3, #64	; 0x40
 800198a:	f000 80bb 	beq.w	8001b04 <UART_SetConfig+0x26c>
 800198e:	d80a      	bhi.n	80019a6 <UART_SetConfig+0x10e>
 8001990:	b97b      	cbnz	r3, 80019b2 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001992:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <UART_SetConfig+0x304>)
 8001994:	429a      	cmp	r2, r3
 8001996:	f040 80ca 	bne.w	8001b2e <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800199a:	f7ff fea9 	bl	80016f0 <HAL_RCC_GetPCLK1Freq>
        break;
 800199e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80019a0:	bbb0      	cbnz	r0, 8001a10 <UART_SetConfig+0x178>
 80019a2:	4602      	mov	r2, r0
 80019a4:	e03a      	b.n	8001a1c <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019a6:	2b80      	cmp	r3, #128	; 0x80
 80019a8:	f000 809d 	beq.w	8001ae6 <UART_SetConfig+0x24e>
 80019ac:	2bc0      	cmp	r3, #192	; 0xc0
 80019ae:	f000 80b0 	beq.w	8001b12 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80019b2:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <UART_SetConfig+0x304>)
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1c7      	bne.n	8001948 <UART_SetConfig+0xb0>
 80019b8:	e02f      	b.n	8001a1a <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <UART_SetConfig+0x320>)
 80019bc:	429a      	cmp	r2, r3
 80019be:	d111      	bne.n	80019e4 <UART_SetConfig+0x14c>
 80019c0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80019c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d0:	f000 8098 	beq.w	8001b04 <UART_SetConfig+0x26c>
 80019d4:	d9dc      	bls.n	8001990 <UART_SetConfig+0xf8>
 80019d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019da:	f000 8084 	beq.w	8001ae6 <UART_SetConfig+0x24e>
 80019de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019e2:	e7e4      	b.n	80019ae <UART_SetConfig+0x116>
 80019e4:	4b6d      	ldr	r3, [pc, #436]	; (8001b9c <UART_SetConfig+0x304>)
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d1ae      	bne.n	8001948 <UART_SetConfig+0xb0>
 80019ea:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fa:	f000 8083 	beq.w	8001b04 <UART_SetConfig+0x26c>
 80019fe:	d9c7      	bls.n	8001990 <UART_SetConfig+0xf8>
 8001a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a04:	d06f      	beq.n	8001ae6 <UART_SetConfig+0x24e>
 8001a06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001a0a:	e7d0      	b.n	80019ae <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001a0c:	486b      	ldr	r0, [pc, #428]	; (8001bbc <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8001a0e:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001a10:	6862      	ldr	r2, [r4, #4]
 8001a12:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001a16:	4281      	cmp	r1, r0
 8001a18:	d905      	bls.n	8001a26 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001a1a:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001a20:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001a22:	4610      	mov	r0, r2
 8001a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001a26:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001a2a:	d8f6      	bhi.n	8001a1a <UART_SetConfig+0x182>
        switch (clocksource)
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d82e      	bhi.n	8001a8e <UART_SetConfig+0x1f6>
 8001a30:	e8df f003 	tbb	[pc, r3]
 8001a34:	2d1c2d05 	.word	0x2d1c2d05
 8001a38:	2d2d2d24 	.word	0x2d2d2d24
 8001a3c:	27          	.byte	0x27
 8001a3d:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a3e:	f7ff fe57 	bl	80016f0 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a42:	6862      	ldr	r2, [r4, #4]
 8001a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a48:	0856      	lsrs	r6, r2, #1
 8001a4a:	2700      	movs	r7, #0
 8001a4c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001a50:	2300      	movs	r3, #0
 8001a52:	4630      	mov	r0, r6
 8001a54:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a56:	f7fe fbb7 	bl	80001c8 <__aeabi_uldivmod>
            break;
 8001a5a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001a5c:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <UART_SetConfig+0x328>)
 8001a5e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001a62:	4299      	cmp	r1, r3
 8001a64:	d8d9      	bhi.n	8001a1a <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	60d8      	str	r0, [r3, #12]
 8001a6a:	e7d7      	b.n	8001a1c <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001a6c:	4855      	ldr	r0, [pc, #340]	; (8001bc4 <UART_SetConfig+0x32c>)
 8001a6e:	0855      	lsrs	r5, r2, #1
 8001a70:	2300      	movs	r3, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a76:	f141 0100 	adc.w	r1, r1, #0
 8001a7a:	e7ec      	b.n	8001a56 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a7c:	f7ff faf2 	bl	8001064 <HAL_RCC_GetSysClockFreq>
 8001a80:	e7df      	b.n	8001a42 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a82:	0850      	lsrs	r0, r2, #1
 8001a84:	2100      	movs	r1, #0
 8001a86:	2300      	movs	r3, #0
 8001a88:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001a8c:	e7f3      	b.n	8001a76 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8001a8e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001a90:	2000      	movs	r0, #0
 8001a92:	e7e3      	b.n	8001a5c <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a94:	f7ff fe3e 	bl	8001714 <HAL_RCC_GetPCLK2Freq>
 8001a98:	e04e      	b.n	8001b38 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a9a:	f7ff fe29 	bl	80016f0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a9e:	6862      	ldr	r2, [r4, #4]
 8001aa0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001aa8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001aaa:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001aac:	f1a3 0010 	sub.w	r0, r3, #16
 8001ab0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001ab4:	4288      	cmp	r0, r1
 8001ab6:	d8b0      	bhi.n	8001a1a <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8001ab8:	6821      	ldr	r1, [r4, #0]
 8001aba:	60cb      	str	r3, [r1, #12]
 8001abc:	e7ae      	b.n	8001a1c <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001abe:	f7ff fe29 	bl	8001714 <HAL_RCC_GetPCLK2Freq>
 8001ac2:	e7ec      	b.n	8001a9e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ac4:	6860      	ldr	r0, [r4, #4]
 8001ac6:	0843      	lsrs	r3, r0, #1
 8001ac8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001acc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ad0:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ad4:	e7e8      	b.n	8001aa8 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ad6:	f7ff fac5 	bl	8001064 <HAL_RCC_GetSysClockFreq>
 8001ada:	e7e0      	b.n	8001a9e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001adc:	6860      	ldr	r0, [r4, #4]
 8001ade:	0843      	lsrs	r3, r0, #1
 8001ae0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ae4:	e7f4      	b.n	8001ad0 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <UART_SetConfig+0x304>)
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d08f      	beq.n	8001a0c <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001af0:	d1e8      	bne.n	8001ac4 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001af2:	6860      	ldr	r0, [r4, #4]
 8001af4:	0843      	lsrs	r3, r0, #1
 8001af6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001afa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001afe:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b02:	e01f      	b.n	8001b44 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <UART_SetConfig+0x304>)
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d10b      	bne.n	8001b22 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001b0a:	f7ff faab 	bl	8001064 <HAL_RCC_GetSysClockFreq>
        break;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e746      	b.n	80019a0 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <UART_SetConfig+0x304>)
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f47f af25 	bne.w	8001964 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001b1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8001b1e:	2308      	movs	r3, #8
 8001b20:	e776      	b.n	8001a10 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b22:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001b26:	d1d6      	bne.n	8001ad6 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b28:	f7ff fa9c 	bl	8001064 <HAL_RCC_GetSysClockFreq>
 8001b2c:	e004      	b.n	8001b38 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b2e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001b32:	d1b2      	bne.n	8001a9a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b34:	f7ff fddc 	bl	80016f0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b38:	6861      	ldr	r1, [r4, #4]
 8001b3a:	084a      	lsrs	r2, r1, #1
 8001b3c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001b40:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b44:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b46:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b48:	f1a3 0010 	sub.w	r0, r3, #16
 8001b4c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001b50:	4288      	cmp	r0, r1
 8001b52:	f63f af62 	bhi.w	8001a1a <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b56:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001b5a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b5c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001b60:	430b      	orrs	r3, r1
 8001b62:	60c3      	str	r3, [r0, #12]
 8001b64:	e75a      	b.n	8001a1c <UART_SetConfig+0x184>
    switch (clocksource)
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	f63f af57 	bhi.w	8001a1a <UART_SetConfig+0x182>
 8001b6c:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <UART_SetConfig+0x2dc>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001a9b 	.word	0x08001a9b
 8001b78:	08001abf 	.word	0x08001abf
 8001b7c:	08001ac5 	.word	0x08001ac5
 8001b80:	08001a1b 	.word	0x08001a1b
 8001b84:	08001ad7 	.word	0x08001ad7
 8001b88:	08001a1b 	.word	0x08001a1b
 8001b8c:	08001a1b 	.word	0x08001a1b
 8001b90:	08001a1b 	.word	0x08001a1b
 8001b94:	08001add 	.word	0x08001add
 8001b98:	efff69f3 	.word	0xefff69f3
 8001b9c:	40008000 	.word	0x40008000
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	080022e4 	.word	0x080022e4
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	080022e8 	.word	0x080022e8
 8001bb0:	40004800 	.word	0x40004800
 8001bb4:	40004c00 	.word	0x40004c00
 8001bb8:	40005000 	.word	0x40005000
 8001bbc:	00f42400 	.word	0x00f42400
 8001bc0:	000ffcff 	.word	0x000ffcff
 8001bc4:	f4240000 	.word	0xf4240000

08001bc8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bca:	07da      	lsls	r2, r3, #31
{
 8001bcc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bce:	d506      	bpl.n	8001bde <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bd0:	6801      	ldr	r1, [r0, #0]
 8001bd2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001bd4:	684a      	ldr	r2, [r1, #4]
 8001bd6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001bda:	4322      	orrs	r2, r4
 8001bdc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001bde:	079c      	lsls	r4, r3, #30
 8001be0:	d506      	bpl.n	8001bf0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001be2:	6801      	ldr	r1, [r0, #0]
 8001be4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001be6:	684a      	ldr	r2, [r1, #4]
 8001be8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bec:	4322      	orrs	r2, r4
 8001bee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001bf0:	0759      	lsls	r1, r3, #29
 8001bf2:	d506      	bpl.n	8001c02 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001bf4:	6801      	ldr	r1, [r0, #0]
 8001bf6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001bf8:	684a      	ldr	r2, [r1, #4]
 8001bfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bfe:	4322      	orrs	r2, r4
 8001c00:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c02:	071a      	lsls	r2, r3, #28
 8001c04:	d506      	bpl.n	8001c14 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c06:	6801      	ldr	r1, [r0, #0]
 8001c08:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c0a:	684a      	ldr	r2, [r1, #4]
 8001c0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c10:	4322      	orrs	r2, r4
 8001c12:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c14:	06dc      	lsls	r4, r3, #27
 8001c16:	d506      	bpl.n	8001c26 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c18:	6801      	ldr	r1, [r0, #0]
 8001c1a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001c1c:	688a      	ldr	r2, [r1, #8]
 8001c1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c22:	4322      	orrs	r2, r4
 8001c24:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c26:	0699      	lsls	r1, r3, #26
 8001c28:	d506      	bpl.n	8001c38 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c2a:	6801      	ldr	r1, [r0, #0]
 8001c2c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001c2e:	688a      	ldr	r2, [r1, #8]
 8001c30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c34:	4322      	orrs	r2, r4
 8001c36:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c38:	065a      	lsls	r2, r3, #25
 8001c3a:	d50f      	bpl.n	8001c5c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c3c:	6801      	ldr	r1, [r0, #0]
 8001c3e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c40:	684a      	ldr	r2, [r1, #4]
 8001c42:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001c46:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c48:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c4c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c4e:	d105      	bne.n	8001c5c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c50:	684a      	ldr	r2, [r1, #4]
 8001c52:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c54:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001c58:	4322      	orrs	r2, r4
 8001c5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	d506      	bpl.n	8001c6e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c60:	6802      	ldr	r2, [r0, #0]
 8001c62:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c64:	6853      	ldr	r3, [r2, #4]
 8001c66:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	6053      	str	r3, [r2, #4]
 8001c6e:	bd10      	pop	{r4, pc}

08001c70 <UART_WaitOnFlagUntilTimeout>:
{
 8001c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c74:	9d06      	ldr	r5, [sp, #24]
 8001c76:	4604      	mov	r4, r0
 8001c78:	460f      	mov	r7, r1
 8001c7a:	4616      	mov	r6, r2
 8001c7c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c7e:	6821      	ldr	r1, [r4, #0]
 8001c80:	69ca      	ldr	r2, [r1, #28]
 8001c82:	ea37 0302 	bics.w	r3, r7, r2
 8001c86:	bf0c      	ite	eq
 8001c88:	2201      	moveq	r2, #1
 8001c8a:	2200      	movne	r2, #0
 8001c8c:	42b2      	cmp	r2, r6
 8001c8e:	d002      	beq.n	8001c96 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001c90:	2000      	movs	r0, #0
}
 8001c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001c96:	1c6b      	adds	r3, r5, #1
 8001c98:	d0f2      	beq.n	8001c80 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c9a:	f7fe fc65 	bl	8000568 <HAL_GetTick>
 8001c9e:	eba0 0008 	sub.w	r0, r0, r8
 8001ca2:	4285      	cmp	r5, r0
 8001ca4:	d301      	bcc.n	8001caa <UART_WaitOnFlagUntilTimeout+0x3a>
 8001ca6:	2d00      	cmp	r5, #0
 8001ca8:	d1e9      	bne.n	8001c7e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001caa:	6823      	ldr	r3, [r4, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cb2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001cc0:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001cc8:	2003      	movs	r0, #3
 8001cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001cce <HAL_UART_Transmit>:
{
 8001cce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001cd2:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001cd4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001cd6:	2b20      	cmp	r3, #32
{
 8001cd8:	4604      	mov	r4, r0
 8001cda:	460e      	mov	r6, r1
 8001cdc:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001cde:	d14b      	bne.n	8001d78 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001ce0:	2900      	cmp	r1, #0
 8001ce2:	d047      	beq.n	8001d74 <HAL_UART_Transmit+0xa6>
 8001ce4:	2a00      	cmp	r2, #0
 8001ce6:	d045      	beq.n	8001d74 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001ce8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d043      	beq.n	8001d78 <HAL_UART_Transmit+0xaa>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf6:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cf8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfa:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cfc:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001cfe:	f7fe fc33 	bl	8000568 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d02:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8001d04:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001d0c:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8001d0e:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d12:	d103      	bne.n	8001d1c <HAL_UART_Transmit+0x4e>
 8001d14:	6923      	ldr	r3, [r4, #16]
 8001d16:	b90b      	cbnz	r3, 8001d1c <HAL_UART_Transmit+0x4e>
 8001d18:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001d1a:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8001d1c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d20:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8001d24:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d26:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8001d28:	b94a      	cbnz	r2, 8001d3e <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d2a:	2140      	movs	r1, #64	; 0x40
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff ff9f 	bl	8001c70 <UART_WaitOnFlagUntilTimeout>
 8001d32:	b950      	cbnz	r0, 8001d4a <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8001d34:	2320      	movs	r3, #32
 8001d36:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8001d38:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001d3c:	e006      	b.n	8001d4c <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff ff94 	bl	8001c70 <UART_WaitOnFlagUntilTimeout>
 8001d48:	b118      	cbz	r0, 8001d52 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001d4a:	2003      	movs	r0, #3
}
 8001d4c:	b003      	add	sp, #12
 8001d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d52:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001d54:	b95e      	cbnz	r6, 8001d6e <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d56:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d5e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001d60:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001d6c:	e7d6      	b.n	8001d1c <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d6e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001d72:	e7f4      	b.n	8001d5e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001d74:	2001      	movs	r0, #1
 8001d76:	e7e9      	b.n	8001d4c <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 8001d78:	2002      	movs	r0, #2
 8001d7a:	e7e7      	b.n	8001d4c <HAL_UART_Transmit+0x7e>

08001d7c <UART_CheckIdleState>:
{
 8001d7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d7e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d80:	2600      	movs	r6, #0
 8001d82:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001d84:	f7fe fbf0 	bl	8000568 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001d8e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d90:	d415      	bmi.n	8001dbe <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	075b      	lsls	r3, r3, #29
 8001d98:	d50a      	bpl.n	8001db0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2200      	movs	r2, #0
 8001da2:	462b      	mov	r3, r5
 8001da4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff ff61 	bl	8001c70 <UART_WaitOnFlagUntilTimeout>
 8001dae:	b990      	cbnz	r0, 8001dd6 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8001db0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001db2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001db4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001db6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001dba:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8001dbc:	e00c      	b.n	8001dd8 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4632      	mov	r2, r6
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff ff4f 	bl	8001c70 <UART_WaitOnFlagUntilTimeout>
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	d0dd      	beq.n	8001d92 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001dd6:	2003      	movs	r0, #3
}
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd70      	pop	{r4, r5, r6, pc}

08001ddc <HAL_UART_Init>:
{
 8001ddc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001dde:	4604      	mov	r4, r0
 8001de0:	b340      	cbz	r0, 8001e34 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001de2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001de4:	b91b      	cbnz	r3, 8001dee <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001de6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001dea:	f000 f999 	bl	8002120 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001dee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001df0:	2324      	movs	r3, #36	; 0x24
 8001df2:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001df4:	6813      	ldr	r3, [r2, #0]
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff fd4b 	bl	8001898 <UART_SetConfig>
 8001e02:	2801      	cmp	r0, #1
 8001e04:	d016      	beq.n	8001e34 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e08:	b113      	cbz	r3, 8001e10 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7ff fedc 	bl	8001bc8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e20:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001e28:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001e30:	f7ff bfa4 	b.w	8001d7c <UART_CheckIdleState>
}
 8001e34:	2001      	movs	r0, #1
 8001e36:	bd10      	pop	{r4, pc}

08001e38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_CAN_RxFifo0MsgPendingCallback>:
char destX[100];
char destY[16];
char destZ[16];
char dest[100];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001e3c:	b510      	push	{r4, lr}
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, buffer)==HAL_OK){
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001e42:	2100      	movs	r1, #0
 8001e44:	f7fe fd09 	bl	800085a <HAL_CAN_GetRxMessage>
 8001e48:	b938      	cbnz	r0, 8001e5a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		HAL_UART_Transmit(&huart2, buffer, 8, 10);
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	4903      	ldr	r1, [pc, #12]	; (8001e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
			}*/
		}
	}
	return;

}
 8001e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Transmit(&huart2, buffer, 8, 10);
 8001e56:	f7ff bf3a 	b.w	8001cce <HAL_UART_Transmit>
 8001e5a:	bd10      	pop	{r4, pc}
 8001e5c:	200004fd 	.word	0x200004fd
 8001e60:	20000138 	.word	0x20000138
 8001e64:	2000089c 	.word	0x2000089c

08001e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e68:	b530      	push	{r4, r5, lr}
 8001e6a:	b097      	sub	sp, #92	; 0x5c
	{
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e6c:	2244      	movs	r2, #68	; 0x44
 8001e6e:	2100      	movs	r1, #0
 8001e70:	a805      	add	r0, sp, #20
 8001e72:	f000 fa23 	bl	80022bc <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e76:	2214      	movs	r2, #20
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4668      	mov	r0, sp
 8001e7c:	f000 fa1e 	bl	80022bc <memset>
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

	  /* erase previous setting */
	  HAL_RCC_DeInit ();
 8001e80:	f7ff f880 	bl	8000f84 <HAL_RCC_DeInit>

	  /* SysClk = (PLL_N * (HSI_VALUE / PLL_M)) / PLL_R   is subject to:
	   * Freq(AHB)  < 168MHz
	   * Freq(APB)  < 42MHz
	   * Freq(APB2) < 84MHz */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e84:	2302      	movs	r3, #2
 8001e86:	9305      	str	r3, [sp, #20]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8c:	9308      	str	r3, [sp, #32]
	  RCC_OscInitStruct.PLL.PLLN = 84;                 // [8..86]
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;      // SysClk = "
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
	#else
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 8001e8e:	2401      	movs	r4, #1
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;      // 16MHz
 8001e90:	2310      	movs	r3, #16
	#endif        // DCLOCK_USE_PLL
	  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8001e92:	a805      	add	r0, sp, #20
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;      // 16MHz
 8001e94:	9309      	str	r3, [sp, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 8001e96:	940f      	str	r4, [sp, #60]	; 0x3c
	  if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8001e98:	f7ff f932 	bl	8001100 <HAL_RCC_OscConfig>
 8001e9c:	b100      	cbz	r0, 8001ea0 <SystemClock_Config+0x38>
 8001e9e:	e7fe      	b.n	8001e9e <SystemClock_Config+0x36>
	    {
		  error_critical ();
	    }

	  /* initialize the SysClk and AHB and APB busses clocks */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ea0:	230f      	movs	r3, #15
	#if DCLOCK_USE_PLL
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	#else
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	#endif      // DCLOCK_USE_PLL
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea2:	9002      	str	r0, [sp, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea4:	9003      	str	r0, [sp, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea6:	9004      	str	r0, [sp, #16]

	  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	4668      	mov	r0, sp
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001eac:	e88d 0018 	stmia.w	sp, {r3, r4}
	  if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001eb0:	f7ff fb88 	bl	80015c4 <HAL_RCC_ClockConfig>
 8001eb4:	b100      	cbz	r0, 8001eb8 <SystemClock_Config+0x50>
 8001eb6:	e7fe      	b.n	8001eb6 <SystemClock_Config+0x4e>
	    {
		  error_critical ();
	    }

	  /* Configure the main internal regulator output voltage */
	  if (HAL_PWREx_ControlVoltageScaling (PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001eb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ebc:	f7fe ffea 	bl	8000e94 <HAL_PWREx_ControlVoltageScaling>
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	b100      	cbz	r0, 8001ec6 <SystemClock_Config+0x5e>
 8001ec4:	e7fe      	b.n	8001ec4 <SystemClock_Config+0x5c>
	    {
		  error_critical ();
	    }

	  /* Configure the Systick */
	  HAL_SYSTICK_CLKSourceConfig (SYSTICK_CLKSOURCE_HCLK);
 8001ec6:	2004      	movs	r0, #4
 8001ec8:	f7fe fec2 	bl	8000c50 <HAL_SYSTICK_CLKSourceConfig>
	  /* Configure the Systick interrupt time */
	  HAL_SYSTICK_Config (HAL_RCC_GetHCLKFreq () / 1000);
	#endif    // 0

	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority (SysTick_IRQn, CONF_IRQPRIO_SYSTICK, 0);
 8001ecc:	462a      	mov	r2, r5
 8001ece:	4621      	mov	r1, r4
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	f7fe fe64 	bl	8000ba0 <HAL_NVIC_SetPriority>
	}
}
 8001ed8:	b017      	add	sp, #92	; 0x5c
 8001eda:	bd30      	pop	{r4, r5, pc}

08001edc <main>:
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8001ee0:	f7fe fb20 	bl	8000524 <HAL_Init>
  SystemClock_Config();
 8001ee4:	f7ff ffc0 	bl	8001e68 <SystemClock_Config>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ee8:	485c      	ldr	r0, [pc, #368]	; (800205c <main+0x180>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eea:	4a5d      	ldr	r2, [pc, #372]	; (8002060 <main+0x184>)
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	4e5d      	ldr	r6, [pc, #372]	; (8002064 <main+0x188>)
	  can_handle = (CAN_HandleTypeDef){0};
 8001eee:	4d5e      	ldr	r5, [pc, #376]	; (8002068 <main+0x18c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef0:	2400      	movs	r4, #0
 8001ef2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ef6:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001efa:	230c      	movs	r3, #12
 8001efc:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001efe:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f00:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f02:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f06:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f08:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f0a:	f7ff ff67 	bl	8001ddc <HAL_UART_Init>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001f16:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	9302      	str	r3, [sp, #8]
 8001f1e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f20:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	64f3      	str	r3, [r6, #76]	; 0x4c
 8001f28:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001f2a:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f2e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f30:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f32:	2120      	movs	r1, #32
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f38:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f3c:	f7fe ff9c 	bl	8000e78 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f40:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	a904      	add	r1, sp, #16
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f48:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	f7fe feb6 	bl	8000cc0 <HAL_GPIO_Init>


/* USER CODE BEGIN 4 */
    /* Configure peripheral GPIO */
    GPIO_InitStruct.Pin = CONF_COM_CAN_RxPIN | CONF_COM_CAN_TxPIN;
 8001f54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f58:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate =  GPIO_AF9_CAN1;
    HAL_GPIO_Init(CONF_COM_CAN_TxRxGPIO, &GPIO_InitStruct);
 8001f5e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate =  GPIO_AF9_CAN1;
 8001f60:	2309      	movs	r3, #9
    HAL_GPIO_Init(CONF_COM_CAN_TxRxGPIO, &GPIO_InitStruct);
 8001f62:	4842      	ldr	r0, [pc, #264]	; (800206c <main+0x190>)
    GPIO_InitStruct.Alternate =  GPIO_AF9_CAN1;
 8001f64:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	f04f 0802 	mov.w	r8, #2
 8001f6a:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(CONF_COM_CAN_TxRxGPIO, &GPIO_InitStruct);
 8001f70:	f7fe fea6 	bl	8000cc0 <HAL_GPIO_Init>
	  can_handle = (CAN_HandleTypeDef){0};
 8001f74:	2228      	movs	r2, #40	; 0x28
 8001f76:	4621      	mov	r1, r4
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f000 f99f 	bl	80022bc <memset>
	  __HAL_RCC_CAN1_CLK_ENABLE();
 8001f7e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f84:	65b3      	str	r3, [r6, #88]	; 0x58
 8001f86:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	9b01      	ldr	r3, [sp, #4]
	  can_handle.Init.Prescaler = 4;
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <main+0x194>)
 8001f92:	2604      	movs	r6, #4
 8001f94:	e885 0048 	stmia.w	r5, {r3, r6}
	  if (HAL_CAN_Init(&can_handle) != HAL_OK)
 8001f98:	4628      	mov	r0, r5
	  can_handle.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f9e:	612b      	str	r3, [r5, #16]
	  if (HAL_CAN_Init(&can_handle) != HAL_OK)
 8001fa0:	f7fe fafc 	bl	800059c <HAL_CAN_Init>
 8001fa4:	b100      	cbz	r0, 8001fa8 <main+0xcc>
 8001fa6:	e7fe      	b.n	8001fa6 <main+0xca>
	  sFilterConfig.FilterBank = 0;
 8001fa8:	9009      	str	r0, [sp, #36]	; 0x24
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001faa:	900a      	str	r0, [sp, #40]	; 0x28
	  sFilterConfig.FilterIdHigh = 0x0000;
 8001fac:	9004      	str	r0, [sp, #16]
	  sFilterConfig.FilterIdLow = 0x0000;
 8001fae:	9005      	str	r0, [sp, #20]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001fb0:	9006      	str	r0, [sp, #24]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001fb2:	9007      	str	r0, [sp, #28]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001fb4:	9008      	str	r0, [sp, #32]
	  sFilterConfig.SlaveStartFilterBank = 14;        // unique CAN instance
 8001fb6:	230e      	movs	r3, #14
	  if (HAL_CAN_ConfigFilter(&can_handle, &sFilterConfig) != HAL_OK)
 8001fb8:	a904      	add	r1, sp, #16
 8001fba:	4628      	mov	r0, r5
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fbc:	970b      	str	r7, [sp, #44]	; 0x2c
	  sFilterConfig.FilterActivation = ENABLE;
 8001fbe:	970c      	str	r7, [sp, #48]	; 0x30
	  sFilterConfig.SlaveStartFilterBank = 14;        // unique CAN instance
 8001fc0:	930d      	str	r3, [sp, #52]	; 0x34
	  if (HAL_CAN_ConfigFilter(&can_handle, &sFilterConfig) != HAL_OK)
 8001fc2:	f7fe fb66 	bl	8000692 <HAL_CAN_ConfigFilter>
 8001fc6:	b100      	cbz	r0, 8001fca <main+0xee>
 8001fc8:	e7fe      	b.n	8001fc8 <main+0xec>
	  if (HAL_CAN_Start(&can_handle) != HAL_OK)
 8001fca:	4628      	mov	r0, r5
 8001fcc:	f7fe fbcd 	bl	800076a <HAL_CAN_Start>
 8001fd0:	b100      	cbz	r0, 8001fd4 <main+0xf8>
 8001fd2:	e7fe      	b.n	8001fd2 <main+0xf6>
	  if (HAL_CAN_ActivateNotification(&can_handle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001fd4:	4641      	mov	r1, r8
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f7fe fcb5 	bl	8000946 <HAL_CAN_ActivateNotification>
 8001fdc:	4604      	mov	r4, r0
 8001fde:	b100      	cbz	r0, 8001fe2 <main+0x106>
 8001fe0:	e7fe      	b.n	8001fe0 <main+0x104>
	  tx_header.StdId =0x108 /*CONF_STATION_ID*/; /*CAN id = 0x108*/
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <main+0x198>)
 8001fe4:	f44f 7884 	mov.w	r8, #264	; 0x108
	  tx_header.RTR = CAN_RTR_DATA;
 8001fe8:	60d8      	str	r0, [r3, #12]
	  tx_header.IDE = CAN_ID_STD;
 8001fea:	6098      	str	r0, [r3, #8]
	  tx_header.TransmitGlobalTime = DISABLE;
 8001fec:	7518      	strb	r0, [r3, #20]
	  HAL_NVIC_SetPriority (CONF_IRQLINE_COM_CANTxRx, CONF_IRQPRIO_COM_CANTxRx, 0);
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4601      	mov	r1, r0
	  tx_header.DLC = sizeof(TxData_header_payload);
 8001ff2:	f04f 0908 	mov.w	r9, #8
	  HAL_NVIC_SetPriority (CONF_IRQLINE_COM_CANTxRx, CONF_IRQPRIO_COM_CANTxRx, 0);
 8001ff6:	2014      	movs	r0, #20
	  tx_header.StdId =0x108 /*CONF_STATION_ID*/; /*CAN id = 0x108*/
 8001ff8:	f8c3 8000 	str.w	r8, [r3]
	  tx_header.ExtId = 0x01;
 8001ffc:	605f      	str	r7, [r3, #4]
	  tx_header.DLC = sizeof(TxData_header_payload);
 8001ffe:	f8c3 9010 	str.w	r9, [r3, #16]
	  HAL_NVIC_SetPriority (CONF_IRQLINE_COM_CANTxRx, CONF_IRQPRIO_COM_CANTxRx, 0);
 8002002:	f7fe fdcd 	bl	8000ba0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ (CONF_IRQLINE_COM_CANTxRx);
 8002006:	2014      	movs	r0, #20
 8002008:	f7fe fdfe 	bl	8000c08 <HAL_NVIC_EnableIRQ>
  	  header_header.StdId = 0x108;
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <main+0x19c>)
 800200e:	f8c3 8000 	str.w	r8, [r3]
      header_header.ExtId = 0x01;
 8002012:	605f      	str	r7, [r3, #4]
      header_header.RTR = CAN_RTR_DATA;
 8002014:	60dc      	str	r4, [r3, #12]
      header_header.IDE = CAN_ID_STD;
 8002016:	609c      	str	r4, [r3, #8]
      header_header.TransmitGlobalTime = DISABLE;
 8002018:	751c      	strb	r4, [r3, #20]
      header_header.DLC = sizeof(TxData_header_payload);
 800201a:	f8c3 9010 	str.w	r9, [r3, #16]
      footer_header.StdId = 0x108;
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <main+0x1a0>)
 8002020:	f8c3 8000 	str.w	r8, [r3]
      footer_header.ExtId = 0x01;
 8002024:	605f      	str	r7, [r3, #4]
      footer_header.RTR = CAN_RTR_DATA;
 8002026:	60dc      	str	r4, [r3, #12]
      footer_header.DLC = sizeof(TxData_footer);
 8002028:	611e      	str	r6, [r3, #16]
      footer_header.IDE = CAN_ID_STD;
 800202a:	609c      	str	r4, [r3, #8]
      footer_header.TransmitGlobalTime = DISABLE;
 800202c:	751c      	strb	r4, [r3, #20]
      memset(buffer, 0, sizeof(buffer));
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <main+0x1a4>)
	  HAL_CAN_AddTxMessage (&can_handle, &header_header, (uint8_t*)TxData_header_payload, &tx_mailbox);
 8002030:	4e14      	ldr	r6, [pc, #80]	; (8002084 <main+0x1a8>)
      memset(buffer, 0, sizeof(buffer));
 8002032:	601c      	str	r4, [r3, #0]
 8002034:	605c      	str	r4, [r3, #4]
	  HAL_CAN_AddTxMessage (&can_handle, &header_header, (uint8_t*)TxData_header_payload, &tx_mailbox);
 8002036:	4c14      	ldr	r4, [pc, #80]	; (8002088 <main+0x1ac>)
 8002038:	490f      	ldr	r1, [pc, #60]	; (8002078 <main+0x19c>)
 800203a:	4623      	mov	r3, r4
 800203c:	4632      	mov	r2, r6
 800203e:	4628      	mov	r0, r5
 8002040:	f7fe fbbe 	bl	80007c0 <HAL_CAN_AddTxMessage>
	  HAL_CAN_AddTxMessage (&can_handle, &footer_header, (uint8_t*)TxData_footer, &tx_mailbox);
 8002044:	4623      	mov	r3, r4
 8002046:	4a11      	ldr	r2, [pc, #68]	; (800208c <main+0x1b0>)
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <main+0x1a0>)
 800204a:	4628      	mov	r0, r5
 800204c:	f7fe fbb8 	bl	80007c0 <HAL_CAN_AddTxMessage>
  	  HAL_Delay(1000);
 8002050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002054:	f7fe fa8e 	bl	8000574 <HAL_Delay>
 8002058:	e7ee      	b.n	8002038 <main+0x15c>
 800205a:	bf00      	nop
 800205c:	2000089c 	.word	0x2000089c
 8002060:	40004400 	.word	0x40004400
 8002064:	40021000 	.word	0x40021000
 8002068:	20000420 	.word	0x20000420
 800206c:	48000400 	.word	0x48000400
 8002070:	40006400 	.word	0x40006400
 8002074:	20000524 	.word	0x20000524
 8002078:	200002d4 	.word	0x200002d4
 800207c:	20000974 	.word	0x20000974
 8002080:	200004fd 	.word	0x200004fd
 8002084:	2000000c 	.word	0x2000000c
 8002088:	20000404 	.word	0x20000404
 800208c:	20000008 	.word	0x20000008

08002090 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_MspInit+0x2c>)
 8002092:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	661a      	str	r2, [r3, #96]	; 0x60
 800209a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800209c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	f002 0201 	and.w	r2, r2, #1
 80020a2:	9200      	str	r2, [sp, #0]
 80020a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020ac:	659a      	str	r2, [r3, #88]	; 0x58
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b8:	b002      	add	sp, #8
 80020ba:	4770      	bx	lr
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020c0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 80020c2:	6802      	ldr	r2, [r0, #0]
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_CAN_MspInit+0x58>)
 80020c6:	429a      	cmp	r2, r3
{
 80020c8:	b089      	sub	sp, #36	; 0x24
  if(hcan->Instance==CAN1)
 80020ca:	d122      	bne.n	8002112 <HAL_CAN_MspInit+0x52>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80020cc:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d0:	a903      	add	r1, sp, #12
    __HAL_RCC_CAN1_CLK_ENABLE();
 80020d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d4:	4811      	ldr	r0, [pc, #68]	; (800211c <HAL_CAN_MspInit+0x5c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80020d6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80020da:	659a      	str	r2, [r3, #88]	; 0x58
 80020dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020de:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80020e2:	9201      	str	r2, [sp, #4]
 80020e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020e8:	f042 0202 	orr.w	r2, r2, #2
 80020ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	9302      	str	r3, [sp, #8]
 80020f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800210a:	2309      	movs	r3, #9
 800210c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f7fe fdd7 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002112:	b009      	add	sp, #36	; 0x24
 8002114:	f85d fb04 	ldr.w	pc, [sp], #4
 8002118:	40006400 	.word	0x40006400
 800211c:	48000400 	.word	0x48000400

08002120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002120:	b510      	push	{r4, lr}
 8002122:	4604      	mov	r4, r0
 8002124:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	2214      	movs	r2, #20
 8002128:	2100      	movs	r1, #0
 800212a:	a803      	add	r0, sp, #12
 800212c:	f000 f8c6 	bl	80022bc <memset>
  if(huart->Instance==USART2)
 8002130:	6822      	ldr	r2, [r4, #0]
 8002132:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_UART_MspInit+0x70>)
 8002134:	429a      	cmp	r2, r3
 8002136:	d128      	bne.n	800218a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002138:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800213e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002140:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002144:	659a      	str	r2, [r3, #88]	; 0x58
 8002146:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002148:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800214c:	9201      	str	r2, [sp, #4]
 800214e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	64da      	str	r2, [r3, #76]	; 0x4c
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002162:	230c      	movs	r3, #12
 8002164:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002172:	2307      	movs	r3, #7
 8002174:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f7fe fda3 	bl	8000cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2026      	movs	r0, #38	; 0x26
 800217e:	4611      	mov	r1, r2
 8002180:	f7fe fd0e 	bl	8000ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002184:	2026      	movs	r0, #38	; 0x26
 8002186:	f7fe fd3f 	bl	8000c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 800218a:	b008      	add	sp, #32
 800218c:	bd10      	pop	{r4, pc}
 800218e:	bf00      	nop
 8002190:	40004400 	.word	0x40004400

08002194 <NMI_Handler>:
 8002194:	4770      	bx	lr

08002196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002196:	e7fe      	b.n	8002196 <HardFault_Handler>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	e7fe      	b.n	8002198 <MemManage_Handler>

0800219a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219a:	e7fe      	b.n	800219a <BusFault_Handler>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	e7fe      	b.n	800219c <UsageFault_Handler>

0800219e <SVC_Handler>:
 800219e:	4770      	bx	lr

080021a0 <DebugMon_Handler>:
 80021a0:	4770      	bx	lr

080021a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a6:	f7fe f9d3 	bl	8000550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	HAL_SYSTICK_IRQHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 80021aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 80021ae:	f7fe bd5c 	b.w	8000c6a <HAL_SYSTICK_IRQHandler>
	...

080021b4 <CAN1_RX0_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */
void
CAN1_RX0_IRQHandler (void)
{
 80021b4:	b510      	push	{r4, lr}
  /* clear hardware IRQ */
  HAL_CAN_IRQHandler (&can_handle);
 80021b6:	4c04      	ldr	r4, [pc, #16]	; (80021c8 <CAN1_RX0_IRQHandler+0x14>)
 80021b8:	4620      	mov	r0, r4
 80021ba:	f7fe fbe1 	bl	8000980 <HAL_CAN_IRQHandler>

  /* extract data */
  HAL_CAN_RxFifo0MsgPendingCallback (&can_handle);
 80021be:	4620      	mov	r0, r4
  return;


}
 80021c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_CAN_RxFifo0MsgPendingCallback (&can_handle);
 80021c4:	f7ff be3a 	b.w	8001e3c <HAL_CAN_RxFifo0MsgPendingCallback>
 80021c8:	20000420 	.word	0x20000420

080021cc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021cc:	4801      	ldr	r0, [pc, #4]	; (80021d4 <USART2_IRQHandler+0x8>)
 80021ce:	f7ff bac3 	b.w	8001758 <HAL_UART_IRQHandler>
 80021d2:	bf00      	nop
 80021d4:	2000089c 	.word	0x2000089c

080021d8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d8:	490f      	ldr	r1, [pc, #60]	; (8002218 <SystemInit+0x40>)
 80021da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <SystemInit+0x44>)
 80021e8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021ea:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80021f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80021fa:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80021fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002200:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002204:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800220c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800220e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002210:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002214:	608b      	str	r3, [r1, #8]
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00
 800221c:	40021000 	.word	0x40021000

08002220 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002258 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002224:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002226:	e003      	b.n	8002230 <LoopCopyDataInit>

08002228 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800222a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800222c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800222e:	3104      	adds	r1, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002230:	480b      	ldr	r0, [pc, #44]	; (8002260 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002234:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002236:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002238:	d3f6      	bcc.n	8002228 <CopyDataInit>
	ldr	r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopForever+0x12>)
	b	LoopFillZerobss
 800223c:	e002      	b.n	8002244 <LoopFillZerobss>

0800223e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800223e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002240:	f842 3b04 	str.w	r3, [r2], #4

08002244 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <LoopForever+0x16>)
	cmp	r2, r3
 8002246:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002248:	d3f9      	bcc.n	800223e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800224a:	f7ff ffc5 	bl	80021d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224e:	f000 f811 	bl	8002274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002252:	f7ff fe43 	bl	8001edc <main>

08002256 <LoopForever>:

LoopForever:
    b LoopForever
 8002256:	e7fe      	b.n	8002256 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002258:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800225c:	08002350 	.word	0x08002350
	ldr	r0, =_sdata
 8002260:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002264:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8002268:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 800226c:	200009d0 	.word	0x200009d0

08002270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC1_2_IRQHandler>
	...

08002274 <__libc_init_array>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	4e0d      	ldr	r6, [pc, #52]	; (80022ac <__libc_init_array+0x38>)
 8002278:	4c0d      	ldr	r4, [pc, #52]	; (80022b0 <__libc_init_array+0x3c>)
 800227a:	1ba4      	subs	r4, r4, r6
 800227c:	10a4      	asrs	r4, r4, #2
 800227e:	2500      	movs	r5, #0
 8002280:	42a5      	cmp	r5, r4
 8002282:	d109      	bne.n	8002298 <__libc_init_array+0x24>
 8002284:	4e0b      	ldr	r6, [pc, #44]	; (80022b4 <__libc_init_array+0x40>)
 8002286:	4c0c      	ldr	r4, [pc, #48]	; (80022b8 <__libc_init_array+0x44>)
 8002288:	f000 f820 	bl	80022cc <_init>
 800228c:	1ba4      	subs	r4, r4, r6
 800228e:	10a4      	asrs	r4, r4, #2
 8002290:	2500      	movs	r5, #0
 8002292:	42a5      	cmp	r5, r4
 8002294:	d105      	bne.n	80022a2 <__libc_init_array+0x2e>
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800229c:	4798      	blx	r3
 800229e:	3501      	adds	r5, #1
 80022a0:	e7ee      	b.n	8002280 <__libc_init_array+0xc>
 80022a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022a6:	4798      	blx	r3
 80022a8:	3501      	adds	r5, #1
 80022aa:	e7f2      	b.n	8002292 <__libc_init_array+0x1e>
 80022ac:	08002348 	.word	0x08002348
 80022b0:	08002348 	.word	0x08002348
 80022b4:	08002348 	.word	0x08002348
 80022b8:	0800234c 	.word	0x0800234c

080022bc <memset>:
 80022bc:	4402      	add	r2, r0
 80022be:	4603      	mov	r3, r0
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d100      	bne.n	80022c6 <memset+0xa>
 80022c4:	4770      	bx	lr
 80022c6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ca:	e7f9      	b.n	80022c0 <memset+0x4>

080022cc <_init>:
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	bf00      	nop
 80022d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d2:	bc08      	pop	{r3}
 80022d4:	469e      	mov	lr, r3
 80022d6:	4770      	bx	lr

080022d8 <_fini>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	bf00      	nop
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr
